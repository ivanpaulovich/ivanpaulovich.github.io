<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on Paulovich.NET</title>
    <link>https://paulovich.net/project/</link>
    <description>Recent content in Projects on Paulovich.NET</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Ivan Paulovich</copyright>
    <lastBuildDate>Fri, 19 Jan 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://paulovich.net/project/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Clean Architecture Kata Dojo</title>
      <link>https://paulovich.net/project/clean-architecture-kata-dojo/</link>
      <pubDate>Fri, 19 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://paulovich.net/project/clean-architecture-kata-dojo/</guid>
      <description>Kata to learn Clean Architecture and Hexagonal Architecture styles, you start with two use cases already implemented and the final solution has six use cases.</description>
    </item>
    
    <item>
      <title>Clean Architecture Manga</title>
      <link>https://paulovich.net/project/clean-architecture-manga/</link>
      <pubDate>Fri, 19 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://paulovich.net/project/clean-architecture-manga/</guid>
      <description>Clean Architecture service template for your Microservice with DDD, TDD and SOLID using .NET Core 2.0. The components are independent and testable, the architecture is evolutionary in multiple dimensions.</description>
    </item>
    
    <item>
      <title>DDD/TDD Kata</title>
      <link>https://paulovich.net/project/ddd-tdd-rich-domain-model-dojo-kata/</link>
      <pubDate>Fri, 19 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://paulovich.net/project/ddd-tdd-rich-domain-model-dojo-kata/</guid>
      <description>Rich Domain with DDD patterns and TDD (.NET Core / Standard)</description>
    </item>
    
    <item>
      <title>Event Sourcing Castanha</title>
      <link>https://paulovich.net/project/event-sourcing-castanha/</link>
      <pubDate>Fri, 19 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://paulovich.net/project/event-sourcing-castanha/</guid>
      <description>An Event Sourcing service template with DDD, TDD and SOLID. It has High Cohesion and Loose Coupling, it&amp;rsquo;s a good start for your next Microservice application.</description>
    </item>
    
    <item>
      <title>Event Sourcing Jambo</title>
      <link>https://paulovich.net/project/event-sourcing-jambo/</link>
      <pubDate>Fri, 19 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://paulovich.net/project/event-sourcing-jambo/</guid>
      <description>An Hexagonal Architecture with DDD + Aggregates + Event Sourcing using .NET Core, Kafka and MongoDB (Blog Engine).</description>
    </item>
    
    <item>
      <title>Hexagonal Architecture Acerola</title>
      <link>https://paulovich.net/project/hexagonal-architecture-acerola/</link>
      <pubDate>Fri, 19 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://paulovich.net/project/hexagonal-architecture-acerola/</guid>
      <description>An Hexagonal Architecture service template with DDD, CQRS, TDD and SOLID using .NET Core 2.0. All small features are testable and could be mocked. Adapters could be mocked or exchanged.</description>
    </item>
    
    <item>
      <title>dotnet new caju</title>
      <link>https://paulovich.net/project/dotnet-new-caju/</link>
      <pubDate>Fri, 19 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://paulovich.net/project/dotnet-new-caju/</guid>
      <description>This dotnet-new template for .NET Back-ends increases productivity on building applications with the Hexagonal, Clean or Event Sourcing architectures styles. This tool generates a .NET back-end with built-in best practices in 15 seconds!</description>
    </item>
    
  </channel>
</rss>