<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="https://paulovich.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://paulovich.net/" rel="alternate" type="text/html" /><updated>2021-11-07T19:38:51+01:00</updated><id>https://paulovich.net/feed.xml</id><title type="html">Paulovich.NET</title><subtitle>Paving the way for a Clean Architecture.</subtitle><entry><title type="html">Clean Architecture Essentials</title><link href="https://paulovich.net/clean-architecture-essentials/" rel="alternate" type="text/html" title="Clean Architecture Essentials" /><published>2019-11-14T00:00:00+01:00</published><updated>2019-11-14T00:00:00+01:00</updated><id>https://paulovich.net/clean-architecture-essentials</id><content type="html" xml:base="https://paulovich.net/clean-architecture-essentials/">&lt;h1 id=&quot;the-software-architecture&quot;&gt;The “Software Architecture”&lt;/h1&gt;

&lt;p&gt;We usually see Software Architecture descriptions like “The software architecture is an ASP.NET Web API with Entity Framework Core and SQL Server”. This article explains why you should describe software by the use cases instead of layers and the frameworks it uses.&lt;/p&gt;

&lt;p&gt;Secondly, I will distill the Clean Architecture Principles.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/hZGF6RHrr8o&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;architecture-is-about-usage&quot;&gt;Architecture is About Usage&lt;/h2&gt;

&lt;p&gt;By a quick look at the following blueprint, you can easily guess it is for a church, a theater or a place that people can gather together. Mostly because there is an open space with many benches focused on the same direction, big doors so a large number of people can enter and leave quickly.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/nauj79ytnncw9o0da1fl.png&quot; alt=&quot;Church Blueprint&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is not a house blueprint, right?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The challenge in software design is to scream the use cases in source code in a way that the first look tells us what the software does instead of frameworks that it is made of.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The default approach of software development is to prioritize the frameworks and technology details. An e-commerce website will scream Web at you, Model-View-Controller or any other framework building blocks.&lt;/p&gt;

&lt;p&gt;Could we design the software in a different way? Let’s introduce Clean Architecture.&lt;/p&gt;

&lt;h2 id=&quot;clean-architecture&quot;&gt;Clean Architecture&lt;/h2&gt;

&lt;p&gt;The Clean Architecture style aims for a loosely coupled implementation focused on use cases and it is summarized as:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It is an architecture style that the Use Cases are the central organizing structure.&lt;/li&gt;
  &lt;li&gt;Follows the Ports and Adapters pattern.
    &lt;ul&gt;
      &lt;li&gt;The implementation is guided by tests (TDD Outside-In).&lt;/li&gt;
      &lt;li&gt;Decoupled from technology details.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Follows lots of principles (Stable Abstractions Principle, Stable Dependencies Principle, SOLID and so on).&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;use-cases&quot;&gt;Use Cases&lt;/h3&gt;

&lt;p&gt;Use Cases are algorithms that interpret the input to generate the output data, their implementation should be closer as possible to the business vocabulary.&lt;/p&gt;

&lt;p&gt;When talking about a use case, it does not matter if it a Mobile or a Desktop application, use cases are delivery independent. The most important about use cases is how they interact with the actors.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Primary actors initiate a use case. They can be the End User, another system or a clock.&lt;/li&gt;
  &lt;li&gt;Secondary actors are affected by use cases.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A set of use cases is used to describe software. Following the Customer primary actor on the left side, in the middle the Ticket Terminal system and the secondary actors on the right side:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/q2twal2uljc0qoy7j4kl.png&quot; alt=&quot;Ticket Terminal Use Cases&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This article uses code snippets from sample applications and talks. If you are familiar with .NET, these GitHub projects host the full implementation:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;:globe_with_meridians: &lt;a href=&quot;https://github.com/ivanpaulovich/clean-architecture-manga&quot;&gt;Clean Architecture Manga&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;:globe_with_meridians: &lt;a href=&quot;https://github.com/ivanpaulovich/todo&quot;&gt;Todo&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Following the project structure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/w7todun7jck4lln2nopf.png&quot; alt=&quot;Structure&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Following the Register Use Case implementation:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Register&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUseCase&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterInput&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_entityFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NewCustomer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_entityFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NewAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Deposit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_entityFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InitialAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_customerRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_accountRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_unitOfWork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Save&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RegisterOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_outputPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Standard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// properties and constructor ommited&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The use cases are first-class objects in the application and WebApi layers. By a quick look at the use case names in the source tree, you can guess that the source code is for a Wallet software.&lt;/p&gt;

&lt;p&gt;In natural language the &lt;strong&gt;RegisterUseCase&lt;/strong&gt; steps are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Instantiate a Customer.&lt;/li&gt;
  &lt;li&gt;Open up an Account then Deposit an Initial Amount.&lt;/li&gt;
  &lt;li&gt;Save the data.&lt;/li&gt;
  &lt;li&gt;Write a message to the output port.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ports-and-adapters-aka-hexagonal-architecture&quot;&gt;Ports and Adapters a.k.a Hexagonal Architecture&lt;/h3&gt;

&lt;p&gt;Clean Architecture applies the Separation of Concerns Principle through the Ports and Adapters pattern. This means that the application layer exposes &lt;strong&gt;Ports&lt;/strong&gt; (Interfaces) and &lt;strong&gt;Adapters&lt;/strong&gt; are implemented in the infrastructure layer.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Ports&lt;/strong&gt; can be an Input Port or an Output Port. The Input Port is called by the Primary Actors and the Output Ports are invoked by the Use Cases.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Adapters&lt;/strong&gt; are technology-specific.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/4x5rmc160cak8eip39bx.png&quot; alt=&quot;Ports and Adapters&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is the preferred architectural style for microservices. Unfortunately, I see lots of incomplete implementations and source code that do not get the most of the pattern.&lt;/p&gt;

&lt;p&gt;The previous picture shows for each dependency two implementations, one Fake (Test Double) implementation, and one Real Implementation. The purpose of it is to make possible to run the software independently of external dependencies.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A Fake implementation provides an illusion of external dependencies, it has the same capabilities expected from the real implementation and it runs without I/O.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The issue that I see in many codebases is the focus on implementing tests against Mocks which can only run through Unit Tests. A fake could run in the Production environment, can help the developer get feedback and it really pays back the investment.&lt;/p&gt;

&lt;p&gt;Let’s start with the Hexagonal Architecture style intent:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Develop, test and run an application in isolation of external devices. Allows a developer to get feedback after every new implementation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Follow &lt;a href=&quot;https://paulovich.net/clean-architecture-tdd-baby-steps/&quot;&gt;TDD Outside-in&lt;/a&gt; in order to achieve the intent:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Start the development from the Test Cases, implement the Use Cases.&lt;/li&gt;
  &lt;li&gt;When you find a dependency, instead of implementing the real one start by creating a Fake (Test Double).&lt;/li&gt;
  &lt;li&gt;Get Feedback, make possible to run your application against the Fakes. You can even publish it to production.&lt;/li&gt;
  &lt;li&gt;Implement the real adapter in isolation.&lt;/li&gt;
  &lt;li&gt;The last step is to create the User Interface.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;principles&quot;&gt;Principles&lt;/h3&gt;

&lt;p&gt;Clean Architecture is full of principles, let’s analyze code snippets for the different levels of Stability and Abstraction:&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IAccountRepository&lt;/code&gt; interface is &lt;strong&gt;highly abstract&lt;/strong&gt;, &lt;strong&gt;general&lt;/strong&gt; and &lt;strong&gt;stable&lt;/strong&gt;. It does not have “implementation”, it is a high-level concept and it does not have dependencies.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAccountRepository&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAccount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICredit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAccount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICredit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAccount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDebit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAccount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AccountRepository&lt;/code&gt; is a &lt;strong&gt;Very Concrete&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sealed class&lt;/code&gt;, and it is
&lt;strong&gt;Very Specific&lt;/strong&gt; to Entity Framework and &lt;strong&gt;Unstable&lt;/strong&gt; by implementing interfaces and depending on libraries.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AccountRepository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAccountRepository&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MangaContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AccountRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MangaContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentNullException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;nameof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAccount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICredit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Accounts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EntityFrameworkDataAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Credits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EntityFrameworkDataAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Credit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAccount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;deleteSQL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;@&quot;DELETE FROM Credit WHERE AccountId = @Id;
                    DELETE FROM Debit WHERE AccountId = @Id;
                    DELETE FROM Account WHERE Id = @Id;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SqlParameter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@Id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;affectedRows&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Database&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ExecuteSqlRawAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;deleteSQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAccount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Guid&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Infrastructure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EntityFrameworkDataAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Account&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Accounts&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SingleOrDefaultAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;AccountNotFoundException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$&quot;The account &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; does not exist or is not processed yet.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credits&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Credits&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AccountId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debits&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Debits&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Where&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AccountId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;credits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAccount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ICredit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Credits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EntityFrameworkDataAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Credit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;credit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAccount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDebit&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Debits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EntityFrameworkDataAccess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Debit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;debit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegisterRequest&lt;/code&gt; class is &lt;strong&gt;concrete&lt;/strong&gt;, by exposing getters and setters it is &lt;strong&gt;inconsistent&lt;/strong&gt; and &lt;strong&gt;specific&lt;/strong&gt; to the consumer.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// Registration Request&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegisterRequest&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// SSN&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Name&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// Initial Amount&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;decimal&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InitialAmount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegisterInput&lt;/code&gt; class is &lt;strong&gt;concrete&lt;/strong&gt;, a little bit &lt;strong&gt;consistent&lt;/strong&gt; and &lt;strong&gt;less specific&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RegisterInput&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUseCaseInput&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SSN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PositiveMoney&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InitialAmount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RegisterInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SSN&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PositiveMoney&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;SSN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;InitialAmount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialAmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The last one is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IAccount&lt;/code&gt; interface that is &lt;strong&gt;highly abstract&lt;/strong&gt;, &lt;strong&gt;general&lt;/strong&gt; and &lt;strong&gt;stable&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IAccount&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAggregateRoot&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ICredit&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Deposit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEntityFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entityFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PositiveMoney&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amountToDeposit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;IDebit&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Withdraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IEntityFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entityFactory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PositiveMoney&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;amountToWithdraw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IsClosingAllowed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Money&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetCurrentBalance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Clean Architecture Principles will guide you to place objects with certain properties according to the following spectrum:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/6rdi4hyfx0ebhk0eq02t.png&quot; alt=&quot;Clean Architecture Spectrum&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Another Clean Architecture representation is by concentric circles, where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The more inner in the diagram the more the layer is stable and abstract.&lt;/li&gt;
  &lt;li&gt;The dependency direction goes inwards the center.&lt;/li&gt;
  &lt;li&gt;Classes that change together are packaged together.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/oa8pcds17jnbxtw42j5d.png&quot; alt=&quot;Clean Architecture Layers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Following another complete example showing that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The User Interface and the Infrastructure Layers are very unstable and concrete. Highly specific to the devices they are designed for.&lt;/li&gt;
  &lt;li&gt;The Core Layer is highly abstract and general. Very stable.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/4hpaw8rmbkvkq4zbzawk.png&quot; alt=&quot;Order Ticket&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;plugin-architecture&quot;&gt;Plugin Architecture&lt;/h2&gt;

&lt;p&gt;During the software development, we will inevitably face discussions about what is the best frontend framework, best database or ORM. We should no fall into these never-ending discussions and deffer decisions like those in the earlier stages. Consider the Uncle Bob quote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A good architecture allows major decisions to be deferred.
A good architect maximizes the number of decisions not made.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;One can easily find arguments to say that NoSQL is the best database, another developer can find good arguments to choose SQL Server as the database.&lt;/p&gt;

&lt;p&gt;My answer to this is that either one should be implemented. The best option is to implement the Fake storage and move on with the project.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/m9ietb03vjnhxn4k3x9z.png&quot; alt=&quot;Plugin Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Keep in mind that you should embrace the change because in the future you will find a Cloud service that will be the better option.&lt;/p&gt;

&lt;h2 id=&quot;ports-and-adapters-in-details&quot;&gt;Ports and Adapters in details&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/pu5uquekwb6pgr74ctye.png&quot; alt=&quot;Alt Text&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;pluggable-user-interface&quot;&gt;Pluggable User Interface&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;Decoupling the User Interface is equally important than decoupling Repositories and Services but we usually don’t put much effort into it. This practice leads to Controllers that look like God classes, hard to test and to maintain.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Suppose that you have a GetAccountDetailsUseCase. It should display one of the following options:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The Account Details.&lt;/li&gt;
  &lt;li&gt;Not Found in case it does not exits.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The initial code should look like:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromRoute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetAccountDetailsRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAccountDetailsInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AccountId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_useCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AccountNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I wish that the Controller does not know about the output message to decide which View to return. Let’s delegate these responsibility to the Presenter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/2f0srp30n1sqdedkeu7p.png&quot; alt=&quot;User Interface&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Controller&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UseCase&lt;/code&gt; implementations uses the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Presenter&lt;/code&gt; instance. The Controller does not know about the output message, so we can have an Action that looks like:&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// Get an account details&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{AccountId}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GetAccount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ProducesResponseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status200OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAccountDetailsResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ProducesResponseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status404NotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromRoute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetAccountDetailsRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAccountDetailsInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AccountId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_useCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_presenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Presenter is in charge of translating the Value Objects into a WebApi response. Fortunately the Value Objects exposes a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToDecimal()&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ToString()&lt;/code&gt; methods which converts it into primitive types.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetAccountDetailsPresenter&lt;/code&gt; implements both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NotFound&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Standard&lt;/code&gt; methods mimicking the StdOut and StdErr from Unix. These methods creates the ViewModel object.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOutputPort&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Standard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAccountDetailsOutput&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getAccountDetailsOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetAccountDetailsPresenter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOutputPort&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NotFoundObjectResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Standard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAccountDetailsOutput&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transactions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TransactionModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;();&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Transactions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;TransactionModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Amount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToMoney&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToDecimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TransactionDate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;transactions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transaction&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAccountDetailsResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AccountId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CurrentBalance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ToDecimal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;transactions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;ViewModel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OkObjectResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GetAccountDetailsUseCase&lt;/code&gt; depends on the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IOutputPort&lt;/code&gt; interface and it calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NotFound&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Standard&lt;/code&gt; method accordingly.&lt;/p&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GetAccountDetails&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUseCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IUseCaseV2&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOutputPort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_outputPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;readonly&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAccountRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_accountRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAccountDetails&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IOutputPort&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IAccountRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_outputPort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_accountRepository&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accountRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Execute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAccountDetailsInput&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;IAccount&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;account&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_accountRepository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AccountId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AccountNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;_outputPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;NotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAccountDetailsOutput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;_outputPort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Standard&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;adding-a-mediator&quot;&gt;Adding a Mediator&lt;/h2&gt;

&lt;div class=&quot;language-c# highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// Get an account details&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;HttpGet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{AccountId}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;GetAccount&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ProducesResponseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status200OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetAccountDetailsResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ProducesResponseType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StatusCodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Status404NotFound&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IActionResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FromRoute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetAccountDetailsRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;GetAccountDetailsInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AccountId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_mediator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;PublishAsync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_presenter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ViewModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You notice that I added the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mediator&lt;/code&gt; instance to decouple the Controller and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UseCase&lt;/code&gt;, it means that the Controller will produce messages, give them to the mediator then the mediator will deliver the message to the appropriate UseCase. Of course, you can invoke the UseCase directly, verify whats works best for your project.&lt;/p&gt;

&lt;p&gt;By definition the Output messages given by the UseCase are a consistent and immutable objects, it uses Value Objects to describe the business state.&lt;/p&gt;

&lt;h1 id=&quot;evolutionary-architecture&quot;&gt;Evolutionary Architecture&lt;/h1&gt;

&lt;p&gt;All developers will build a Task List app at least once. As a .NET Developer we always start thinking by creating an WebApi first then dig into the business details, for this sample application I wanted to proceed differently.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/p0djcfppl8rg337xecvm.png&quot; alt=&quot;Todo Use Cases&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I started the development from the Unit Tests, implementing the Use Cases independently and for each dependency creating a Fake. After a while I decided to create a SQL Server database because that is what .NET Developers do, we spin up a SQL Server so we can persist taks ;)&lt;/p&gt;

&lt;p&gt;To make it short, at the end a Console UI and a Storage to GitHub gist was good enough for me.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://thepracticaldev.s3.amazonaws.com/i/16lvcpag4bddy0dcgcih.png&quot; alt=&quot;Evolutionary Architecture&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Clean Architecture is about usage and the use cases are the central organizing principle.&lt;/li&gt;
  &lt;li&gt;Use cases implementation are guided by tests.&lt;/li&gt;
  &lt;li&gt;The User Interface and Persistence are designed to fulfill the core needs (not the opposite!).&lt;/li&gt;
  &lt;li&gt;Defer decisions by implementing the simplest component first.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/ivanpaulovich/clean-architecture-manga&quot;&gt;source code is on GitHub&lt;/a&gt; and it is updated frequently with new videos and pull-requests. Check it out!&lt;/p&gt;</content><author><name>Ivan Paulovich</name><email>ivan@paulovich.net</email></author><category term="CleanArchitecture," /><category term="TDD" /><summary type="html">The “Software Architecture”</summary></entry><entry><title type="html">Clean Architecture Implementation Sample With .NET</title><link href="https://paulovich.net/clean-architecture-implementation-sample-dotnet/" rel="alternate" type="text/html" title="Clean Architecture Implementation Sample With .NET" /><published>2019-03-10T05:12:52+01:00</published><updated>2019-03-10T05:12:52+01:00</updated><id>https://paulovich.net/clean-architecture-implementation-sample-dotnet</id><content type="html" xml:base="https://paulovich.net/clean-architecture-implementation-sample-dotnet/">&lt;p&gt;Hi all, I started a new open source project about &lt;a href=&quot;https://github.com/ivanpaulovich/dotnet-clean-architecture&quot;&gt;Clean Architecture with .NET&lt;/a&gt; and I invite you all to check out! 
The use cases are about a &lt;strong&gt;Todo List App&lt;/strong&gt; and I am using the principles from the book to design the solution.&lt;/p&gt;</content><author><name>Ivan Paulovich</name><email>ivan@paulovich.net</email></author><summary type="html">Hi all, I started a new open source project about Clean Architecture with .NET and I invite you all to check out! The use cases are about a Todo List App and I am using the principles from the book to design the solution.</summary></entry><entry><title type="html">Clean Architecture and TDD</title><link href="https://paulovich.net/architecture-templates-for-dotnet-new/" rel="alternate" type="text/html" title="Clean Architecture and TDD" /><published>2019-02-19T05:12:52+01:00</published><updated>2019-02-19T05:12:52+01:00</updated><id>https://paulovich.net/clean-architecture-tdd-baby-steps</id><content type="html" xml:base="https://paulovich.net/architecture-templates-for-dotnet-new/">&lt;p&gt;Nowadays all software development companies are self-titled Agile (if you are not Agile you are not cool right?). Most companies are following the SCRUM ceremonies, they adopted small developers teams, they have a SM and PO roles.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Are SCRUM ceremonies enough to be Agile? How the software implementation interfer?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I could say a lot about a company on how they answer the following question:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Are teams delivering working software to real users on every iteration (including the first) and gathering feedback?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;If the answer is &lt;em&gt;No&lt;/em&gt; I suppose the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Teams usually do not deliver on the first iteration because they are designing an architecture or adding framework dependencies.&lt;/li&gt;
  &lt;li&gt;They do not gather user feedback on every iteration.&lt;/li&gt;
  &lt;li&gt;Long lead time for every new feature, the business value is retained for long time.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Agile is about collaboration with people, gathering feedback from real users!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Why software take so long to reach the production environment? Why they have so many bugs?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The software architecture is the main reason for features taking long time to be released to production. It is common that teams do a lot of effort designing a big archictecture up front that requires fancy frameworks for every feature. The end result is an application overwhelmed of dependencies, error prone and hard to change.&lt;/p&gt;

&lt;p&gt;The application reachs production with many bugs because the team spend most of the time configuring the web server, working with ORM frameworks and the user interfaces. The team did not have time in collaboration with the users trying to understand the use cases and implementing the business rules.&lt;/p&gt;

&lt;p&gt;By a lack of confidence, the developers try to implement the frameworks on the initial sprints to avoid getting caught unprepared on the later sprints. This decision create coupling with technology. Let me ask some questions: - Do we need a database server to implement the business rules? Do we need a running web server to gather the real user feedback?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;We don’t need a SQL Server or a running Web Server to gather user feedback on the business rules.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To design a tightly coupled architecture we just need to begin with configuring the database, the web server, the frameworks then in the remaining time implementing the business rules.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;With so many moving parts we fail to get the real user feedback! Worse… it will fail slowly.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now… suppose that we wish to design a software architecture that prioritize collaboration with Domain Experts. We desire an application loose coupled to a database and the web server, we want to decide about these details when we have enough information. Is implementing the business requirements the priority for your organization? If that’s the case you will need to work on your programming disciplines.&lt;/p&gt;

&lt;h2 id=&quot;just-enough-architecture&quot;&gt;Just Enough Architecture&lt;/h2&gt;

&lt;p&gt;What if we could focus on business requirements and ignore everything else? The idea behind “Ports and Adapters” is to decouple the high level modules from the low level modules, in simple terms you could decouple the business rules from the database and user interface.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/static/hexagonal-architeture/hexagonal-architecture.png&quot;&gt;&lt;img src=&quot;/static/hexagonal-architecture/hexagonal-architecture.png&quot; alt=&quot;Hexagonal Architecture&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;As you can see on the left side there are driving actors:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Test Harness&lt;/li&gt;
  &lt;li&gt;User Interface&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The secondary actors are on the right side:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mocked Database&lt;/li&gt;
  &lt;li&gt;SQL Database Adapter&lt;/li&gt;
  &lt;li&gt;Mocked Webserver&lt;/li&gt;
  &lt;li&gt;Webserver Adapter&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The use cases are implemented inside the &lt;strong&gt;Application Layer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;What I am saying is that whatever the right or left side dependencies are you always can delay their implementation by prioritizing tests and mocks. The use cases are the important thing you need to focus on! Is there a correct order to implement an Hexagonal Architecture?&lt;/p&gt;

&lt;h2 id=&quot;ports-and-adapters-implementation-workflow&quot;&gt;Ports and Adapters Implementation Workflow&lt;/h2&gt;

&lt;p&gt;The benefit of “Ports and Adapters” is that the application use cases could be implemented in isolation from external services, so we can delay the database and webserver implementation by creating fake implementations.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What about the driving actors? When should I implement them?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;/static/hexagonal-architecture/guided-by-tests-1.png&quot; alt=&quot;First Step&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;first driving adapter&lt;/strong&gt; you should implement are the &lt;strong&gt;Test Harness&lt;/strong&gt;. And to run tests you don’t need an user inteface, see how you don’t need to worry about button colors and font faces? These tests will guide the use case implementation against a mocked database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/hexagonal-architecture/guided-by-tests-2.png&quot; alt=&quot;Second Step&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With the knowledge acquired by the unit tests implementation you can more confident design the &lt;strong&gt;User Interface&lt;/strong&gt; then get user feedback. Every stage is a learning process, be open to change the use cases implementation and test harness at anytime!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/hexagonal-architecture/guided-by-tests-3.png&quot; alt=&quot;Third Step&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You now can go deeper in details and implement how the application consume the database, and you can run your existing tests against this secondary actor. Should I say that you will do small changes in the application use cases to support this new adapter? You will!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/hexagonal-architecture/guided-by-tests-4.png&quot; alt=&quot;Final Step&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last step you run the &lt;strong&gt;User Interface&lt;/strong&gt; against a real database implementation and get more feedback!&lt;/p&gt;

&lt;h3 id=&quot;optional-acceptance-tests&quot;&gt;Optional Acceptance Tests&lt;/h3&gt;

&lt;p&gt;We could create tests for the User Interface. Considering that you followed the previous steps.&lt;/p&gt;

&lt;h2 id=&quot;why-tdd-is-agile&quot;&gt;Why TDD is Agile?&lt;/h2&gt;

&lt;p&gt;Agile methodology is not about doing things quickly without quality. When designing tests you may feel that you are wasting time and in reality is the opposite:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The only way to go fast is to go well. Every time you yeild to the temptation to trade quality for speed, you slow down. Every time. Uncle Bob.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Software should be implemented incrementally and on every sprint you should acquire business knowleadge that help you be effective on the next sprint.&lt;/p&gt;</content><author><name>Ivan Paulovich</name><email>ivan@paulovich.net</email></author><summary type="html">Nowadays all software development companies are self-titled Agile (if you are not Agile you are not cool right?). Most companies are following the SCRUM ceremonies, they adopted small developers teams, they have a SM and PO roles.</summary></entry><entry><title type="html">Hexagonal and Clean Architecture Styles with .NET Core (Reviewed)</title><link href="https://paulovich.net/hexagonal-and-clean-architecture-styles-with-net-core-reviewed/" rel="alternate" type="text/html" title="Hexagonal and Clean Architecture Styles with .NET Core (Reviewed)" /><published>2018-08-16T06:12:52+02:00</published><updated>2018-08-16T06:12:52+02:00</updated><id>https://paulovich.net/hexagonal-and-clean-architecture-styles-with-net-core-reviewed</id><content type="html" xml:base="https://paulovich.net/hexagonal-and-clean-architecture-styles-with-net-core-reviewed/">&lt;p&gt;Unfortunately remain very common that applications are built on top of frameworks and databases. I see that developers usually implement software that mimics the data tables instead of design software driven by the business domain. As time goes by, the software becomes highly coupled to these external details and what happens next is the application evolution been dictated by the vendors support. Hexagonal Architecture (aka Ports and Adapters) is one strategy to decouple the use cases from the external details. It was coined by Alistar Cockburn more than 13 years ago, and this received improvements with the Onion and Clean Architectures. Let me introduce the Hexagonal Architecture’s intent:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Allow an application to equally be driven by users, programs or tests, and to be developed and tested in isolation from any of its eventual run-time devices and databases.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I need to point out that &lt;strong&gt;Business Rules and Use Cases&lt;/strong&gt; should be implemented inside the Application Layer and they need to be maintained for the project’s life, in the other hand everything that give support for external capabilities are just &lt;strong&gt;external details&lt;/strong&gt;, they can be replaced for different reasons, and we do not want the business rules to be coupled to them. It is important to distinguish between the business and the details.&lt;/p&gt;

&lt;h3 id=&quot;business-rules-and-use-cases&quot;&gt;Business Rules and Use Cases&lt;/h3&gt;

&lt;p&gt;The business rules are the fine grained rules, they encapsulate entity fields and constraints. Also the business rules are the use cases that interacts with multiple entities and services. They together creates a process in the application, they should be sustained for a long time. If the difference remain not clear, this Uncle Bob quote will clarify:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Business Rules would make or save the business money, irrespective of whether they were implemented on a computer. They would make or save money even if they were executed manually.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the DDD age, we have patterns to describe the business rules with Entities, Value Objects, Aggregates, Domain Services and so on. They are a perfect match with Hexagonal Architecture.&lt;/p&gt;

&lt;h3 id=&quot;external-details&quot;&gt;External Details&lt;/h3&gt;

&lt;p&gt;In most scenarios we can defer the implementation of external details and still keep the development progress. If your answer is yes for any of the next questions, you are probably dealing with peripheral details:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Does the application needs an database to persist state?&lt;/li&gt;
  &lt;li&gt;Does the application requires an User Interface?&lt;/li&gt;
  &lt;li&gt;Does the application consumes an external API?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are common external details which can be mocked, faked or their concrete implementation be replaced for different reasons. I suggest you to defer their implementation while you discover more of the domain. Keep in mind the Uncle Bob’s quote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A good architecture allows major decisions to be deferred and a good architect maximize the number of decisions not made.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Visual Studio makes it easy to add libraries for Reflection, Serialization, Security and many others Nuget packages in our projects.  The problem begin when we add these libraries to our Application and Domain. These libraries are just details and should be left out of the Application Layer. What we should do?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stop going for shinning frameworks.&lt;/li&gt;
  &lt;li&gt;Stop writing classes with inheritance from frameworks.&lt;/li&gt;
  &lt;li&gt;Focus on the business rules, make them clear on your Application and Domain Layers.&lt;/li&gt;
  &lt;li&gt;Don’t fall into tooling traps like scaffolding.&lt;/li&gt;
  &lt;li&gt;Create the appropriate abstraction for these peripheral concerns.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Moving on, there are design principles that you should understand before implementing the Hexagonal Architecture style.&lt;/p&gt;

&lt;h3 id=&quot;dependency-inversion-principle-dip&quot;&gt;Dependency Inversion Principle (DIP)&lt;/h3&gt;

&lt;p&gt;In the next example, the DIP was applied when decoupling our Use Cases from the Repositories. It is important to understand this priciple as it was applied to decouple other stuff in our source code. Let’s remember the DIP then navigate through one example:  &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s see how I applied this principle in the next example: &lt;img src=&quot;/static/DIP-1-2.png&quot; alt=&quot;&quot; /&gt; On the left side we found in red an Layered Application where the DepositUseCase depends on the AccountSQLRepository implementation. It is a coupled way to write code. On the right side in blue, by adding an IAccountRepository and applying DIP then the AccountSQLRepository has its dependency pointing inwards.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The DepositUseCase is the &lt;strong&gt;High-level module&lt;/strong&gt; that do not depend on database details, instead it depends on IAccountRepository abstraction.&lt;/li&gt;
  &lt;li&gt;The IAccountRepository is the &lt;strong&gt;abstraction&lt;/strong&gt; that do not depend on database details.&lt;/li&gt;
  &lt;li&gt;The AccountSQLRepository is the &lt;strong&gt;low-level module&lt;/strong&gt; that depends on IAccountRepository abstraction.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following listing of DepositUseCase with DIP:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ivanpaulovich/d8050e2bc3d02a8fcca011d6d17f4831.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That is the main idea behind Hexagonal Architecture, whenever our application requires an external service we use the Port (a simple interface) and we implement the Adapter behind the abstraction.&lt;/p&gt;

&lt;h3 id=&quot;separation-of-concerns-soc&quot;&gt;&lt;strong&gt;Separation of Concerns&lt;/strong&gt; (SoC)&lt;/h3&gt;

&lt;p&gt;Our application requires some external capabilities but the application is not concerned about their implementation details, only their abstractions are visible to the application layer. We apply &lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;SoC&lt;/a&gt; by creating boundaries around the Adapters and by allowing them to be developed and tested in isolation. It’s a good practice to have different packages for each Adapter implementation. We could have an specific Adapter for an SQL Database and an specific Adapter for Azure Storage both could be replaced with little effort. That is the idea behind the Hexagonal Architecture, &lt;strong&gt;keep the options open as long as possible and the ability to rollback if necessary&lt;/strong&gt;. We can quote Uncle Bob’s Plugin Architecture, about the relationship between Visual Studio and Resharper. Not a single line of VS knows about Resharper, but Resharper is developed based on the Visual Studio abstractions. They are developed by different companies one in Seattle and another in Moscow and still running well together.&lt;/p&gt;

&lt;h2 id=&quot;hexagonal-architecture-style-characteristics&quot;&gt;Hexagonal Architecture Style Characteristics&lt;/h2&gt;

&lt;p&gt;With this style we have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An independent Business Domain to embody the fine grained business rules.&lt;/li&gt;
  &lt;li&gt;Use Cases interacting with the Domain and independent of external services.&lt;/li&gt;
  &lt;li&gt;Interfaces providing ports.&lt;/li&gt;
  &lt;li&gt;Adapters providing implementations of frameworks, data access and UI.&lt;/li&gt;
  &lt;li&gt;Externally the user, other systems and services.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One way to explain the Hexagonal Architecture is by its shapes. Take a look at the following picture: &lt;img src=&quot;/static/hexagonal-1.png&quot; alt=&quot;&quot; /&gt;  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The blue potato shape at the center is the Domain Layer and there are reasons for it. Every business domain has its own rules, very specific business rules, that is the reason of its undefined shape. For example, I designed our Domain Layer with DDD Building Blocks.&lt;/li&gt;
  &lt;li&gt;The application has an hexagonal shape because each of its sides has specifics protocols.&lt;/li&gt;
  &lt;li&gt;The Ports and Adapters are implemented outside of the application as plugins.&lt;/li&gt;
  &lt;li&gt;Externally we have other systems.&lt;/li&gt;
  &lt;li&gt;The Hexagonal is splitted in left and right. On the left we implement the driving actors and on the right we implement the secondary actors.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The direction of the dependencies goes inwards the center, so the Domain Layer does not know the Application Layer but the Application Layer depends on the Domain, the same rule applies to the outer layers.&lt;/p&gt;

&lt;h3 id=&quot;layers&quot;&gt;Layers&lt;/h3&gt;

&lt;p&gt;Let’s describe the Dependency Diagram below:&lt;/p&gt;

&lt;h2&gt;&lt;img src=&quot;/static/Untitled-Diagram-1.png&quot; alt=&quot;&quot; /&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The Domain Layer is totally independent of other layers and frameworks.&lt;/li&gt;
  &lt;li&gt;The Application Layer depends exclusively on the Domain Layer.&lt;/li&gt;
  &lt;li&gt;The Application Layer is independent of frameworks, databases and UI.&lt;/li&gt;
  &lt;li&gt;The UI Layer and the Infrastructure Layer provides implementations for the Application needs.&lt;/li&gt;
  &lt;li&gt;The UI Layer depends on Application Layer and it loads the Infrastructure Layer by indirection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We should pay attention that the Infrastructure Layer can have many concerns. I recommend to design the infrastructure in a way you can split it when necessary, particularly when you have distinct adapters with overlapping concerns. It is important to highlight the dashed arrow from the UI Layer to the Infrastructure layer. That is the where &lt;strong&gt;Dependency Injection&lt;/strong&gt; is implemented, the concretions are loaded closer to the Main function. And there is a single setting in a external file that decides all the dependencies to be loaded.&lt;/p&gt;

&lt;h2 id=&quot;application-layer&quot;&gt;&lt;strong&gt;Application Layer&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Let’s dig into the Application Business Rules implemented by the Use Cases in our Bounded Context. As said by Uncle Bob in his book Clean Architecture:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Just as the plans for a house or a library scream about the use cases of those buildings, so should the architecture of a software application scream about the use cases of the application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Use Cases implementations are first-class modules in the root of this layer. The shape of a Use Case is an &lt;strong&gt;Interactor&lt;/strong&gt; object that receives an &lt;strong&gt;Input&lt;/strong&gt;, do some work then pass the &lt;strong&gt;Output&lt;/strong&gt; through the caller. That’s the reason I am an advocate of feature folders describing the use cases and inside them the necessary classes: &lt;img src=&quot;/static/Use-Cases.png&quot; alt=&quot;&quot; /&gt; At your first look of the solution folders, you can build an idea of the purpose of this software. It seems like it can manage your Banck Account, for example you can Deposit or Withdraw money. Following we see the communication between the layers: &lt;img src=&quot;/static/Clean-Architecture-Style.png&quot; alt=&quot;&quot; /&gt; The Application exposes an interface (Port) to the UI Layer and another interface (another Port) to the Infrastructure Layer. What have you seen until here is &lt;strong&gt;Enterprise + Application Business Rules&lt;/strong&gt; enforced without frameworks dependencies or without database coupling. Every details has abstractions protecting the Business Rules to be coupled to tech stuff.&lt;/p&gt;

&lt;h2 id=&quot;adapters-for-the-user-interface&quot;&gt;Adapters for the User Interface&lt;/h2&gt;

&lt;p&gt;Now we advance to the next layer, at the User Interface Layer we translate the input in a way that the Use Cases can understand, it is good practice to do not reuse entities in this layer because it could create coupling, the front-end has specific frameworks, other ways of creating its data structures, different presentation for each field and validation rules. In our implementation we have the following feature folders for every use case: &lt;img src=&quot;/static/Web-Use-Cases.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Request&lt;/strong&gt;: a data structure for the user input (accountId and amount).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A Controller with an Action&lt;/strong&gt;: this component receives the DepositRequest, calls the appropriate Deposit Use Case which do some processing then pass the output through the Presenter instance.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Presenter&lt;/strong&gt;: it converters the Output to the Model.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt;: this is the return data structure for MVC applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We must highlight that the Controller knows the Deposit Use Case and it is not interested about the Output, instead the Controller delegates the responsibility of generating a Model to the Presenter instance.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ivanpaulovich/7bef3a9745f181757c8fbb1f009ac079.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;An Presenter class is detailed bellow and it shows a conversion from the DepositOutput to two different ViewModels. One ViewModel for null Outputs and another ViewModel for successful deposits.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ivanpaulovich/21c175748c960a844c6165167be267ff.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;adapters-for-the-infrastructure&quot;&gt;Adapters for the Infrastructure&lt;/h2&gt;

&lt;p&gt;Another external layer is the Infrastructure Layer that implements Data Access, Dependency Injection Framework (DI) and other frameworks specifics. In this example we have multiple data access implementations. &lt;img src=&quot;/static/Infrastructure.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-and-when-the-di-is-configured&quot;&gt;How and When the DI is configured&lt;/h2&gt;

&lt;p&gt;We group the DI by Modules, so we have an module for the Entity Framework Data Access that requires a connection string like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ivanpaulovich/b2e66b47612faf1a95ea23b70e772394.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;There is others modules in the same code base and we can run using them by changing the &lt;strong&gt;autofac.entityframework.json&lt;/strong&gt;, an convenient way to setup desired modules.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ivanpaulovich/0a0eb90cb0aefda9d5ab497159f5ac46.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The autofac.json in set on the very beginning in the Program.cs. As it should be!&lt;/p&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source Code&lt;/h2&gt;

&lt;p&gt;You can download the source code on &lt;a href=&quot;https://github.com/ivanpaulovich/clean-architecture-manga&quot;&gt;Clean Architecture&lt;/a&gt; github repository or through the following commands:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ivanpaulovich/3b5ca9b2b49991a5254f03ec1ffae70f.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;With Hexagonal Architecture you design a decoupled software that allows major decisions to be deferred, all business rules will be isolated from peripheral concerns. And you have the option to try different adapters with less effort. Have your experience when the code base gets coupled to an specific framework? What are your experience with Hexagonal Architecture? Leave your comment.&lt;/p&gt;</content><author><name>Ivan Paulovich</name><email>ivan@paulovich.net</email></author><summary type="html">Unfortunately remain very common that applications are built on top of frameworks and databases. I see that developers usually implement software that mimics the data tables instead of design software driven by the business domain. As time goes by, the software becomes highly coupled to these external details and what happens next is the application evolution been dictated by the vendors support. Hexagonal Architecture (aka Ports and Adapters) is one strategy to decouple the use cases from the external details. It was coined by Alistar Cockburn more than 13 years ago, and this received improvements with the Onion and Clean Architectures. Let me introduce the Hexagonal Architecture’s intent:</summary></entry><entry><title type="html">Rich Domain Model with DDD/TDD (Reviewed)</title><link href="https://paulovich.net/rich-domain-model-with-ddd-tdd-reviewed/" rel="alternate" type="text/html" title="Rich Domain Model with DDD/TDD (Reviewed)" /><published>2018-07-29T06:12:52+02:00</published><updated>2018-07-29T06:12:52+02:00</updated><id>https://paulovich.net/rich-domain-model-with-ddd-tdd-reviewed</id><content type="html" xml:base="https://paulovich.net/rich-domain-model-with-ddd-tdd-reviewed/">&lt;p&gt;Through my journey of building Domain Models I had good and bad experiences that today I share with you to save a few hours of your development time. These are opinionated approaches that I follow when building Rich Domain Models. A Rich Domain Model is the technical part when applying DDD, it envolves the building blocks like Entity, Value Objects and Aggregate Root. The goal is to build a ubiquitous language between developers and stakeholders using the a vocabulary that describes the business rules. What are the business rules? Its what’s make or save money, irrespective of whether they were implemented on a computer or manually. This kind of rules are simple to be described in words as they do not require a database, in fact the database is just an &lt;em&gt;IO device that our software requires&lt;/em&gt; to persist state. We could say the same about the Web, it is only a delivery mechanism to present information to our users and has nothing to do with the business rules. Having that clear is my way of thinking but what I find in our industry is a spaghetti of business rules, persistence libraries and frameworks code. In the next few topics I’m going to expose code issues we want to avoid before you decide to invest time building rich domains models . The code issues I am referring to are known as code smells, and they are associated with architecture and development problems.&lt;/p&gt;

&lt;h2 id=&quot;code-smells-to-avoid&quot;&gt;Code Smells to Avoid&lt;/h2&gt;

&lt;p&gt;The opposite of the Rich Domain Models are the Anemic Domain Models, in this second one the business logic are implemented far from the classes that own the data, it brings low cohesion and nonexistent encapsulation. The next topics introduce common code smells related to Anemic Domain Models.&lt;/p&gt;

&lt;h3 id=&quot;feature-envy&quot;&gt;Feature Envy&lt;/h3&gt;

&lt;p&gt;It’s the situation where a client class access the fields of another class more than it’s own data. In order to keep the policies of the second class consistent the consumer needs to validate and manipulate multiple fields together. This code smell is easy to find when “Application Services” or “Extension Methods” are envy of other Entities fields. These application services implement the policies that should be managed by the Entities classes. Just like this: &lt;img src=&quot;/static/envy.png&quot; alt=&quot;&quot; /&gt; The solution for this code smell is to move the envy method into the class that owns the data then hide the internal details. &lt;img src=&quot;/static/feature-envy-fixed.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;primitive-obsession&quot;&gt;Primitive Obsession&lt;/h3&gt;

&lt;p&gt;It’s the use of primitive types like string, integer or arrays to ensure the fine grained business rules. As there is no encapsulation, the code get repeatedly validated in different places. These issues are found:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When “Security Social Numbers”, “Phone numbers” or Money are repeatedly validated from the UI through the database.&lt;/li&gt;
  &lt;li&gt;When a client class needs to manipulate arrays of other classes in order to keep the data and policies consistent. At first having methods to manipulate arrays everywhere (eg. linq) seems an advantage. Then the different places do not implement in the same way, or you need a big effort to maintain it consistent.&lt;/li&gt;
  &lt;li&gt;The generic arrays and collections leaks abstraction, they provide access to language specific methods instead of the methods known by the ubiquitous language.&lt;/li&gt;
&lt;/ul&gt;

&lt;script src=&quot;https://gist.github.com/ivanpaulovich/0836d7d7a4b41b4fa44240b5ab643375.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;To fix this issue we need to create a value object that encapsulate the fine grained business logic and for collections we should use the adapter pattern with the proper methods to manipulate the items.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ivanpaulovich/0dd5df2132bf247e9590b36a59a3dda0.js&quot;&gt;&lt;/script&gt;

&lt;h3 id=&quot;public-setters-abuse&quot;&gt;Public Setters Abuse&lt;/h3&gt;

&lt;p&gt;This is far the most common code smell seen in .NET applications, I guess is due to the Entity Framework popularity and its code samples and patterns that exposes every entity properties. To clarify the problem I share the fundamentals of object-oriented programming language, its encapsulation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When composing objects into a new type, we want the new type to exhibit simpler behavior than all of it’s component parts considered together. Steve Freeman (GOOS)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Let’s suppose that a entity have three properties and they are all public exposed. So there is no encapsulation, the complete complexity of the class are the equals as all internal fields. It allows the consumers to change the internal fields at any time anywhere. The consumers need to understand how to change the properties and to maintain the state consistent. This code issue are seen together with business classes been designed to meet the ORM frameworks restrictions. The end result are classes that only reflect the tables structure. To fix this issue we need to remove the public setters and move the logic to and create new methods.&lt;/p&gt;

&lt;h3 id=&quot;anemic-classes&quot;&gt;Anemic Classes&lt;/h3&gt;

&lt;p&gt;It’s the photograph of a poor implemented business requirements. This kind of classes only store data, they do not implement behaviors or policies. How to fix that? Not simple answer but you need to start thinking on:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If you are calling two setters in a row, you are missing a concept (Oliver Gierke)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These code smells alone doesn’t mean that the code is bad at all. In certain conditions these characteristics are necessary. The problem happens when multiple code smells are combined in a single code base, then the software gets harder to change, the regression tests are required for small changes and the bugs are frequent. Let’s build a new mindset, the journey is worth it!&lt;/p&gt;

&lt;h2 id=&quot;how-to-enrich-domain-models&quot;&gt;How to Enrich Domain Models?&lt;/h2&gt;

&lt;p&gt;I begin following TDD practices, it gives me confidence to enrich the model in different places incrementally. I know two TDD approaches, the inside-out and the outside-in. And to be honest I prefer the inside-out approach, with the guidance of DDD building blocks. The DDD building blocks guides me in the correct path. I start thinking on Entities, Value Objects and Aggregates then I move outside to the Use Cases and Repositories. I am able to discover a lot of domain, design the model without working on database and UI. Next, a short description of what we gonna need from DDD.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Value Objects: its immutable custom types that are distinguishable only by the state of its properties.&lt;/li&gt;
  &lt;li&gt;Entities: its custom types that are distinguishable by an identity property, it has data and behaviors.&lt;/li&gt;
  &lt;li&gt;Aggregate roots: a kind on entity that maintain the object graph in consistent state and is associated to a repository.&lt;/li&gt;
  &lt;li&gt;Use Cases: coordinates the operations with the domain objects and services.&lt;/li&gt;
  &lt;li&gt;Repositories and Services: provides access to external resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We are going to learn by example, next you see some business rules then the implementation. To design a Rich Model we need to concern only on business policies, all the external details like databases, HTTP and serialization will be addressed later. In our example, we define the business with the following use cases and requirements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The customer can register a new account.&lt;/li&gt;
  &lt;li&gt;Allow to deposit into an existing account.&lt;/li&gt;
  &lt;li&gt;Allow to withdraw from an existing account.&lt;/li&gt;
  &lt;li&gt;Accounts can be closed only if they have zero balance.&lt;/li&gt;
  &lt;li&gt;Accounts does not allow to withdraw more than the current account balance.&lt;/li&gt;
  &lt;li&gt;Allow to get the account details.&lt;/li&gt;
  &lt;li&gt;Allow to get the customer details.&lt;/li&gt;
  &lt;li&gt;It’s required from the customer to fill Name, SSN and to deposit an initial amount when registering.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We could identify the following DDD patterns for these business: &lt;a href=&quot;/static/model.png&quot;&gt;&lt;img src=&quot;/static/model.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Aggregate Roots:&lt;/strong&gt; Customer and Account.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Entities:&lt;/strong&gt; Credit and Debit.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Value Objects:&lt;/strong&gt; Name, SSN and Amount.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use Cases&lt;/strong&gt;: Register, Deposit, Withdraw, Close, Get Customer Details, Get Account Details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We warn you that our model are persistent ignorant, it privileges the business and we avoid ORM frameworks interference in our classes. To design the Customer we think first on the test specification.&lt;/p&gt;

&lt;h4 id=&quot;customertestscs&quot;&gt;CustomerTests.cs&lt;/h4&gt;

&lt;p&gt;We point out that the Customer and Account are aggregate roots and they only know each other by their IDs. The Customer.Register(..) method does not accept the Account instance, instead accepts only the AccountId.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ivanpaulovich/79d405a602685bb2e8468aa6dd00f42b.js&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;customercs&quot;&gt;Customer.cs&lt;/h4&gt;

&lt;p&gt;All fields are private set so all the state changes are made by the methods, the specific Accounts property return an IReadOnlyCollection to prevent unexpected changes from consumers. In this class the state consistent from the constructor that requires the customer details to the Register(..) method. Previously, I said that I would not corrupt the Model in order to persist the entities state. I made and exception for the factory method that receives the complete Customer fields then it creates a Customer instance.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ivanpaulovich/5d3f702a55a4700dd23a272a2dca5617.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;To persist the objects graph the repository can read the public properties.&lt;/p&gt;

&lt;h4 id=&quot;accountcs&quot;&gt;Account.cs&lt;/h4&gt;

&lt;p&gt;I added the sealed modifier to the Account class to prevent inheritance. I am an advocate of composition over inheritance, and I added this modifier to the domain classes to be clear with my intention. I don’t want to allow consumers to create unnecessary coupling. The transaction history can be modified only in the next situations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;By the deposit method which adds and transaction.&lt;/li&gt;
  &lt;li&gt;By the withdraw method which adds and transaction.&lt;/li&gt;
  &lt;li&gt;By the factory method which recreates the list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The consistency is ensured by not allowing the client to make changes on the TransactionCollection property.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ivanpaulovich/21ca4c7b445764adcfc676c503a13348.js&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;ssncs&quot;&gt;SSN.cs&lt;/h4&gt;

&lt;p&gt;This class is a value object for the Swedish Personnummer and it encapsulates the complexity of validating the string format. Whenever I refer to a string personnummer I can use this class.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ivanpaulovich/6c7776aaff93e29e21ec3e037c9df2e9.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source Code&lt;/h2&gt;

&lt;p&gt;There are more examples of Rich Domain in my GitHub repository. You can find the Aggregates, Entities and the Values objects. Also everything is covered by Unit Tests. The source code is available on GitHub &lt;a href=&quot;https://github.com/ivanpaulovich/ddd-tdd-rich-domain&quot;&gt;DDD/TDD Rich Domain&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/ivanpaulovich/ddd-tdd-rich-domain.git
cd ddd-tdd-rich-domain
./build.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Give it a stargazer, fork it if you like.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Building rich domains is not an easy task, in fact it requires much more effort to implement the business requirements and how to hide the internal details. Fortunately we can leverage on TDD practices to validate the API usage, and to ensure it’s correctness. The DDD patterns help us understand how the components should work together. We highlight that the principles of high cohesion and low coupling are required to lower the complexity of the code base. Have you implemented a Rich Domain Model? How was your experience? Leave your feedback.&lt;/p&gt;</content><author><name>Ivan Paulovich</name><email>ivan@paulovich.net</email></author><summary type="html">Through my journey of building Domain Models I had good and bad experiences that today I share with you to save a few hours of your development time. These are opinionated approaches that I follow when building Rich Domain Models. A Rich Domain Model is the technical part when applying DDD, it envolves the building blocks like Entity, Value Objects and Aggregate Root. The goal is to build a ubiquitous language between developers and stakeholders using the a vocabulary that describes the business rules. What are the business rules? Its what’s make or save money, irrespective of whether they were implemented on a computer or manually. This kind of rules are simple to be described in words as they do not require a database, in fact the database is just an IO device that our software requires to persist state. We could say the same about the Web, it is only a delivery mechanism to present information to our users and has nothing to do with the business rules. Having that clear is my way of thinking but what I find in our industry is a spaghetti of business rules, persistence libraries and frameworks code. In the next few topics I’m going to expose code issues we want to avoid before you decide to invest time building rich domains models . The code issues I am referring to are known as code smells, and they are associated with architecture and development problems.</summary></entry><entry><title type="html">Guidelines to Enrich Anemic Domain Models with TDD/DDD</title><link href="https://paulovich.net/guidelines-to-enrich-anemic-domain-models-tdd-ddd/" rel="alternate" type="text/html" title="Guidelines to Enrich Anemic Domain Models with TDD/DDD" /><published>2018-06-24T06:12:52+02:00</published><updated>2018-06-24T06:12:52+02:00</updated><id>https://paulovich.net/guidelines-to-enrich-anemic-domain-models-tdd-ddd</id><content type="html" xml:base="https://paulovich.net/guidelines-to-enrich-anemic-domain-models-tdd-ddd/">&lt;p&gt;In my previous blog posts you could see &lt;a href=&quot;https://paulovich.net/clean-architecture-for-net-applications/&quot;&gt;Clean Architecture&lt;/a&gt; and &lt;a href=&quot;https://paulovich.net/hexagonal-architecture-dot-net/&quot;&gt;Hexagonal&lt;/a&gt; implementations. Continuing this series I am going deeper on the Domain Layer, through my journey of building rich domain models I had bad and good experiences that now I would like to share with you. These are my opinionated approaches that could streamline your learning process. What are the business rules? The business rules would make or save the business money, irrespective of whether they were implemented on a computer or manually. This kind of rules are simple to be described in words as they do not require a database, in fact the database are just an &lt;em&gt;IO device that our software requires&lt;/em&gt; to persist state. We could say the same about the Web, the way we present the information to our users has nothing to do with the business rules. That is the mine mindset but what I find in our industry is a mix of business, persistence and frameworks.
&lt;a href=&quot;/static/li-tzuni-507346-unsplash.jpg&quot;&gt;&lt;img src=&quot;/static/li-tzuni-507346-unsplash.jpg&quot; alt=&quot;Photo by li tzuni on Unsplash&quot; /&gt;&lt;/a&gt; Photo by li tzuni on Unsplash[/caption] To begin we need to understand the code issues we want to avoid before decide to invest time and effort on building rich domains models. The code issues I am referring to are known as code smells, and they are associated with architecture and development problems.&lt;/p&gt;

&lt;h2 id=&quot;code-smells-to-avoid&quot;&gt;Code Smells to Avoid&lt;/h2&gt;

&lt;p&gt;The opposite of the Rich Domain Models are the Anemic Domain Models, in this second one the business logic are implemented far from the classes that own the data, it brings low cohesion and nonexistent encapsulation. The next topics introduce common code smells in Anemic Domain Models.&lt;/p&gt;

&lt;h3 id=&quot;feature-envy&quot;&gt;Feature Envy&lt;/h3&gt;

&lt;p&gt;It’s the situation where a client class access the fields of another class more than it’s own data. In order to keep the policies of the second class consistent the consumer needs to validate and manipulate multiple fields together. This code smell is easy to find:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When “Application Services” or “Extension Methods” are envy of the Entities fields. These kind of classes implement the policies that should be managed by the data owner, in most of cases the Entities classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;primitive-obsession&quot;&gt;Primitive Obsession&lt;/h3&gt;

&lt;p&gt;It’s the use of primitive types (string, int, float, arrays) for simple tasks that ensures the business rules. There common issues are seen:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When you see “Security Social Numbers”, “Phone numbers” and Money been repeatedly validated from the UI through the database. To fix this issue we need to create a custom type to encapsulate this logic.&lt;/li&gt;
  &lt;li&gt;When a client class needs to manipulate arrays in external classes in order to keep the data and policies consistent. Generic Lists and Collections leaks abstraction, they provide access to built-in methods to manage the items that are not desired by the business rules. To fix this issue we need to create an Adapter class with the proper methods to manipulate the items.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;abuse-of-the-public-setters&quot;&gt;Abuse of the Public Setters&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;When composing objects into a new type, we want the new type to exhibit simpler behavior than all of it’s component parts considered together. Steve Freeman (GOOS)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The classes that exposes all the internal complexity by allowing the consumers to change the internal fields at any time and anywhere. Due to the non-existent encapsulation the consumers need to understand how to change the class properties and to keep the state consistent. To fix this issue we need to remove the public setters and move the logic to proper methods.&lt;/p&gt;

&lt;h3 id=&quot;business-classes-designed-for-orm&quot;&gt;Business Classes Designed for ORM&lt;/h3&gt;

&lt;p&gt;Instead of design the classes to meet business requirements the classes are designed to meet the ORM frameworks requirements. The end result are classes that only reflect tables structure.&lt;/p&gt;

&lt;h3 id=&quot;anemic-classes&quot;&gt;Anemic Classes&lt;/h3&gt;

&lt;p&gt;It’s the photograph of a poor implemented business requirements. This kind of classes only store data, they do not implement behaviors or policies. These code smells alone doesn’t mean that the code is bad at all. In certain conditions these characteristics are necessary. The problem happens when multiple code smells are combined in a single code base, then the software gets harder to change, the regression tests are required for small changes and the bugs are frequent. Check out the &lt;a href=&quot;https://refactoring.guru/refactoring/smells&quot;&gt;Refactoring Guru&lt;/a&gt; for a compiled list of code smells. Let’s build a new mindset, the journey is worth it!&lt;/p&gt;

&lt;h2 id=&quot;how-to-enrich-domain-models&quot;&gt;How to Enrich Domain Models?&lt;/h2&gt;

&lt;p&gt;The reason we invest effort on enrich the Domain is to prove it’s viability, we can do a lot of work without worrying about the database or presentations concerns. 
&lt;a href=&quot;/static/victor-freitas-593843-unsplash.jpg&quot;&gt;&lt;img src=&quot;/static/victor-freitas-593843-unsplash.jpg&quot; alt=&quot;Photo by Victor Freitas on Unsplash&quot; /&gt;&lt;/a&gt; Photo by Victor Freitas on Unsplash[/caption] To design a rich model we need to concern only on business policies, all the external details like Databases, HTTP and serialization will be addressed later. In our example, we define the business with the following use cases and requirements:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The customer can register a new account.&lt;/li&gt;
  &lt;li&gt;Allow to deposit into an existing account.&lt;/li&gt;
  &lt;li&gt;Allow to withdraw from an existing account.&lt;/li&gt;
  &lt;li&gt;Accounts can be closed only if they have zero balance.&lt;/li&gt;
  &lt;li&gt;Accounts does not allow to withdraw more than the current account balance.&lt;/li&gt;
  &lt;li&gt;Allow to get the account details.&lt;/li&gt;
  &lt;li&gt;Allow to get the customer details.&lt;/li&gt;
  &lt;li&gt;It’s required from the customer to fill Name, SSN and to deposit an initial amount when registering.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;We are going straight to the entities and use cases and see what we can do with OO principles to design a Rich Domain Model. We could identify the following patterns:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Aggregate Roots:&lt;/strong&gt; Customer and Account&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Entities:&lt;/strong&gt; Credit and Debit&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Value Objects:&lt;/strong&gt; Name, SSN and Amount&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Use Cases&lt;/strong&gt;: Register, Deposit, Withdraw, Close, Get Customer Details, Get Account Details.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We alert that our model are persistent ignorant, it privileges the business and we avoid ORM frameworks interference in our classes. To design the Customer we think first on the test specification. We would like the Customer API to be used this way:&lt;/p&gt;

&lt;h4 id=&quot;customertestscs&quot;&gt;CustomerTests.cs&lt;/h4&gt;

&lt;p&gt;We point out that the Customer and Account are aggregate roots and they must know each other by their IDs. The Customer.Register(..) method does not accept the Account instance, instead accepts only the AccountId.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ivanpaulovich/79d405a602685bb2e8468aa6dd00f42b.js&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;customercs&quot;&gt;Customer.cs&lt;/h4&gt;

&lt;p&gt;All fields are private sets so all the state changes are made by the methods, the specific Accounts property return an IReadOnlyCollection to prevent unexpected changes from consumers. In this class the state consistency are ensured from the constructor that requires the customer details to the Register(..) method. Previously, I said that I would not corrupt the Model in order to persist the state. I made and exception for the factory method that receives the complete Customer fields as parameters and it creates a Customer instance. To persist the objects the repository can use the public properties to get the Customer state.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ivanpaulovich/5d3f702a55a4700dd23a272a2dca5617.js&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;accountcs&quot;&gt;Account.cs&lt;/h4&gt;

&lt;p&gt;I added the sealed modifier to the Account class to prevent inheritance. I am an advocate of composition over inheritance, and I added this modifier to the domain classes to be transparent with my intention. I don’t want the consumers creating unnecessary coupling. The transaction history can be changed only in the next situations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;By the deposit method which adds and transaction.&lt;/li&gt;
  &lt;li&gt;By the withdraw method which adds and transaction.&lt;/li&gt;
  &lt;li&gt;By the factory method which recreates the list.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The consistency is ensured by not allowing the client to make changes on the TransactionCollection property.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ivanpaulovich/21ca4c7b445764adcfc676c503a13348.js&quot;&gt;&lt;/script&gt;

&lt;h4 id=&quot;ssncs&quot;&gt;SSN.cs&lt;/h4&gt;

&lt;p&gt;This class is a value object for the Swedish Personnummer and it encapsulates the complexity of validating the string format. Whenever I am refer to a string personnummer I can use this class.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/ivanpaulovich/6c7776aaff93e29e21ec3e037c9df2e9.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source Code&lt;/h2&gt;

&lt;p&gt;There are more examples of Rich Domain in my GitHub repository. You can find the Aggregates, Entities and the Values objects. Also everything is covered by Unit Tests. You can download the source code on &lt;a href=&quot;https://github.com/ivanpaulovich/ddd-tdd-rich-domain&quot;&gt;DDD/TDD Rich Domain&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/ivanpaulovich/ddd-tdd-rich-domain.git
cd ddd-tdd-rich-domain
./build.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;span data-mce-type=&quot;bookmark&quot; style=&quot;display: inline-block; width: 0px; overflow: hidden; line-height: 0;&quot; class=&quot;mce\_SELRES\_start&quot;&gt;﻿&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Building rich domains is not an easy task, in fact it requires much more to think on implementing the business requirements and how to hide the internal details. Fortunately we can leverage on TDD practices to validate the API usage, and to ensure it’s correctness. The DDD patterns help us understand how the components should work together. We highlight that the principles of high cohesion and low coupling are required to lower the complexity of the code base. What do you think?&lt;/p&gt;</content><author><name>Ivan Paulovich</name><email>ivan@paulovich.net</email></author><summary type="html">In my previous blog posts you could see Clean Architecture and Hexagonal implementations. Continuing this series I am going deeper on the Domain Layer, through my journey of building rich domain models I had bad and good experiences that now I would like to share with you. These are my opinionated approaches that could streamline your learning process. What are the business rules? The business rules would make or save the business money, irrespective of whether they were implemented on a computer or manually. This kind of rules are simple to be described in words as they do not require a database, in fact the database are just an IO device that our software requires to persist state. We could say the same about the Web, the way we present the information to our users has nothing to do with the business rules. That is the mine mindset but what I find in our industry is a mix of business, persistence and frameworks. Photo by li tzuni on Unsplash[/caption] To begin we need to understand the code issues we want to avoid before decide to invest time and effort on building rich domains models. The code issues I am referring to are known as code smells, and they are associated with architecture and development problems.</summary></entry><entry><title type="html">Hexagonal Architecture with .NET</title><link href="https://paulovich.net/hexagonal-architecture-dot-net/" rel="alternate" type="text/html" title="Hexagonal Architecture with .NET" /><published>2018-05-26T06:12:52+02:00</published><updated>2018-05-26T06:12:52+02:00</updated><id>https://paulovich.net/hexagonal-architecture-dot-net</id><content type="html" xml:base="https://paulovich.net/hexagonal-architecture-dot-net/">&lt;p&gt;The feedback of the &lt;a href=&quot;https://paulovich.net/clean-architecture-for-net-applications/&quot;&gt;Clean Architecture for .NET Applications&lt;/a&gt; made me feel like I needed to take a step back and introduce some concepts first, so I will present my implementation of Hexagonal Architecture to make easier to understand them completely. Unfortunately in my previous experiences in different companies, remain very common that applications are built on top of frameworks and databases. I see that many developers are used to implement software that mimics the data tables instead of design software driven by the business domain. As time goes by, the software becomes highly coupled to these external details and what happens next is the application evolution been dictated by what the vendors support. Hexagonal Architecture (aka Ports and Adapters) is one strategy to decouple the use cases from the external details. It was coined by &lt;a href=&quot;http://alistair.cockburn.us/Hexagonal+architecture&quot;&gt;Alistar Cockburn&lt;/a&gt; more than 13 years ago, and it is getting better with the Onion and Clean Architectures. Let me introduce the Hexagonal Architecture’s intent:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Allow an application to equally be driven by users, programs or tests, and to be developed and tested in isolation from any of its eventual run-time devices and databases.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I need to point out that everything that gives support for external capabilities are just External Details, on the other side everything that contains the Business Rules and Use Cases should be inside the A_pplication Layer_ and they need to be sustained for long time. In our software we have to distinguish between one and the other.&lt;/p&gt;

&lt;h3 id=&quot;external-details&quot;&gt;External Details&lt;/h3&gt;

&lt;p&gt;In most scenarios we can defer the implementation of external details and still validate the application behavior. If your answer is yes for any of the next questions, you are probably dealing with peripheral details:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Does the application needs an database to persist state?&lt;/li&gt;
  &lt;li&gt;Does the application requires an User Interface?&lt;/li&gt;
  &lt;li&gt;Does the application consumes an external API?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These are common external details which can be mocked, faked or their concrete implementation be replaced for different reasons. I suggest to defer their implementation while you discover more of the domain. Keep in mind the Uncle Bob’s quote:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A good architecture allows major decisions to be deferred and a good architect maximize the number of decisions not made.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Visual Studio makes easier to add libraries for Reflection, Serialization, Security and many others Nuget packages in our projects.  The problem begin when we add these libraries to our Application and Domain. These libraries are just details and should be out of the Application. What we can do?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stop writing classes with inheritance from frameworks.&lt;/li&gt;
  &lt;li&gt;Stop going for shinning objects.&lt;/li&gt;
  &lt;li&gt;Focus on the business rules, make them clear on your Application and Domain Layers.&lt;/li&gt;
  &lt;li&gt;Don’t fall into tooling traps.&lt;/li&gt;
  &lt;li&gt;Create the appropriate abstraction for these peripheral concerns.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For didactic reasons we call these details as Ports and Adapters in Hexagonal Architecture style.&lt;/p&gt;

&lt;h3 id=&quot;business-rules-and-use-cases&quot;&gt;Business Rules and Use Cases&lt;/h3&gt;

&lt;p&gt;The business rules are the fine grained rules, they encapsulate entity fields and conditions. Also the business rules are the use cases that interacts with many entities and services. They together give create process in the application, they should be sustained for a long time. If it’s still unclear, this Uncle Bob phrase might help:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Business Rules would make or save the business money, irrespective of whether they were implemented on a computer. They would make or save money even if they were executed manually.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the DDD age, we have patterns to describe business with Entities, Value Types, Aggregates, Domain Services and so on. They are a perfect match with Hexagonal Architecture. Moving on, there are design principles that must be clear before implementing Hexagonal Architecture style.&lt;/p&gt;

&lt;h3 id=&quot;dependency-inversion-principle-dip&quot;&gt;Dependency Inversion Principle (DIP)&lt;/h3&gt;

&lt;p&gt;In the next example, the &lt;a href=&quot;https://drive.google.com/file/d/0BwhCYaYDn8EgMjdlMWIzNGUtZTQ0NC00ZjQ5LTkwYzQtZjRhMDRlNTQ3ZGMz/view&quot;&gt;DIP&lt;/a&gt; was applied when decoupling our Application Services from the Repositories. And this principle was used to decouple many other things in our Application. Let’s remember the DIP and navigate through one example:  &lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions. Abstractions should not depend on details. Details should depend on abstractions.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For the following example checkout the concepts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The DepositService is the &lt;strong&gt;High-level module&lt;/strong&gt; that do not depend on database details, instead it depends on IAccountRepository abstraction.&lt;/li&gt;
  &lt;li&gt;The IAccountRepository is the &lt;strong&gt;abstraction&lt;/strong&gt; that do not depend on database details.&lt;/li&gt;
  &lt;li&gt;The AccountSQLRepository is the &lt;strong&gt;low-level module&lt;/strong&gt; that depends on IAccountRepository abstraction.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To clarify the idea I created the next picture with the before and after applying DIP:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/static/DIP-1-2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;On the left side of the next picture we find in blue an Layered Application where the DepositService depends on AccountSQLRepository.&lt;/li&gt;
  &lt;li&gt;And on the right side in green, by adding an IAccountRepository and applying DIP then the AccountSQLRepository has your dependency pointing inwards. aaaaa&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following listing of DepositService shows an implementation. Suggestion: clone the &lt;a href=&quot;https://github.com/ivanpaulovich/acerola-hexagonal-architecture&quot;&gt;Acerola repo&lt;/a&gt; for the full implementation.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class DepositService : IDepositService
{
  private readonly IAccountReadOnlyRepository accountReadOnlyRepository;
  private readonly IAccountWriteOnlyRepository accountWriteOnlyRepository;
  private readonly IResultConverter resultConverter;

  public DepositService(
    IAccountReadOnlyRepository accountReadOnlyRepository,
    IAccountWriteOnlyRepository accountWriteOnlyRepository,
    IResultConverter resultConverter)
  {
    this.accountReadOnlyRepository = accountReadOnlyRepository;
    this.accountWriteOnlyRepository = accountWriteOnlyRepository;
    this.resultConverter = resultConverter;
  }

  public async Task&amp;lt;DepositResult&amp;gt; Process(DepositCommand command)
  {
    Account account = await accountReadOnlyRepository.Get(command.AccountId);
    if (account == null)
      throw new AccountNotFoundException(
      $&quot;The account {command.AccountId} does not exists or is already closed.&quot;);

    Credit credit = new Credit(account.Id, command.Amount);
    account.Deposit(credit);

    await accountWriteOnlyRepository.Update(account, credit);

    TransactionResult transactionResult = resultConverter.Map(credit);
    DepositResult result = new DepositResult(
      transactionResult,
      account.GetCurrentBalance().Value);

    return result;
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That is the main idea behind Hexagonal Architecture, every time our application requires an external service we implement adapter behind an abstraction.&lt;/p&gt;

&lt;h3 id=&quot;separation-of-concerns-soc&quot;&gt;&lt;strong&gt;Separation of Concerns&lt;/strong&gt; (SoC)&lt;/h3&gt;

&lt;p&gt;Our application requires some external capabilities but the application is not concerned about their implementation details, only their abstractions are visible to the application layer. We apply &lt;a href=&quot;https://en.wikipedia.org/wiki/Separation_of_concerns&quot;&gt;SoC&lt;/a&gt; by creating boundaries around the Adapters and by allowing them to be developed and tested in isolation. Usually, we have different packages for each Adapter. We could have an specific Adapter for an SQL Database and an specific Adapter for Azure Storage which could be replaced with little effort. That is the idea behind the Hexagonal Architecture, &lt;strong&gt;keep the options open as long as possible and the ability to rollback if necessary&lt;/strong&gt;. We can quote Uncle Bob’s Plugin Architecture, with the relationship between Visual Studio and Resharper. Not a single line of VS knows about Resharper, but Resharper is developed based on the Visual Studio abstractions. They are developed by different companies one in Seattle and another in Moscow and still running well together.&lt;/p&gt;

&lt;h2 id=&quot;hexagonal-architecture-style-characteristics&quot;&gt;Hexagonal Architecture Style Characteristics&lt;/h2&gt;

&lt;p&gt;With this style we have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;An independent Business Domain to embody the small set of critical business rules.&lt;/li&gt;
  &lt;li&gt;Application Services to implement the use cases.&lt;/li&gt;
  &lt;li&gt;Ports to get the input.&lt;/li&gt;
  &lt;li&gt;Adapters providing implementations of frameworks and access to databases.&lt;/li&gt;
  &lt;li&gt;Externally the user, other systems and services.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;One way to explain the Hexagonal Architecture is by its shapes. Take a look at the following picture: &lt;img src=&quot;/static/hexagonal-1.png&quot; alt=&quot;&quot; /&gt;  &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The blue potato shape at the center is the Domain and there are reasons for it. Every business domain has its own rules, different specifications from each other, that is the reason of its undefined shape. For instance, I designed our Domain Layer with DDD Patterns.&lt;/li&gt;
  &lt;li&gt;The application has an hexagonal shape because each of its sides has specifics protocols, in our example we have &lt;strong&gt;Commands&lt;/strong&gt; and &lt;strong&gt;Queries&lt;/strong&gt; giving access to the Application.&lt;/li&gt;
  &lt;li&gt;The Ports and Adapters are implemented outside of the application as plugins.&lt;/li&gt;
  &lt;li&gt;Externally we have other systems.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The direction of the dependencies goes inwards the center, so the Domain Layer does not know the Application Layer but the Application Layer depends on the Domain, the same rule applies to the outer layers.&lt;/p&gt;

&lt;h3 id=&quot;layers&quot;&gt;Layers&lt;/h3&gt;

&lt;p&gt;Let’s describe the Dependency Layer Diagram below:&lt;/p&gt;

&lt;h2&gt;&lt;a href=&quot;/static/Untitled-Diagram-1.png&quot;&gt;&lt;img src=&quot;/static/Untitled-Diagram-1.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;The domain is totally independent of other layers and frameworks.&lt;/li&gt;
  &lt;li&gt;The application depends on Domain and is independent of frameworks, databases and UI.&lt;/li&gt;
  &lt;li&gt;Adapters provides implementations for the Application needs.&lt;/li&gt;
  &lt;li&gt;The UI depends on Application and loads the Infrastructure by indirection.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We should pay attention that the Infrastructure Layer can have many concerns. I recommend to design the infrastructure in a way you can split it when necessary, particularly when you have distinct adapters with overlapping concerns. It is important to highlight the dashed arrow from the UI Layer to the Infrastructure layer. That is the where &lt;strong&gt;Dependency Injection&lt;/strong&gt; is implemented, the concretions are loaded closer to the Main function. And there is a single setting in a external file that decides all the dependencies to be loaded.&lt;/p&gt;

&lt;h3 id=&quot;the-application-layer&quot;&gt;The Application Layer&lt;/h3&gt;

&lt;p&gt;To make simpler the Application Layer implementation, I split it in two stacks: one for the transactions and other for the queries.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;When the user sends an Deposit Input, it goes to the transactions stack, it is converted into a Command that goes through the DepositService, uses the Entities to enforce the business rules and the transaction is finally persisted in a database by an adapter.&lt;/li&gt;
  &lt;li&gt;The other stack is tinnier and implemented by the Adapters. It is used only for querying view objects.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this approach we avoid the degradation of our domain because we don’t need to represent every Query Results into Entities.&lt;/p&gt;

&lt;h3 id=&quot;use-cases-components&quot;&gt;Use Cases Components&lt;/h3&gt;

&lt;p&gt;It is very important to organize the Application Layer with the use case vocabulary. I recommend one folder for each use case, as we have in the following example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Command (DepositCommand.cs)&lt;/li&gt;
  &lt;li&gt;Use case Interface (IDepositService.cs)&lt;/li&gt;
  &lt;li&gt;Use case Implementation (DepositService.cs)&lt;/li&gt;
  &lt;li&gt;Command Result (DepositResult.cs)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With this approach we have an application design that supports new use case implementations with fewer changes in existing code base. This keep the work effort for new use cases implementations constants along the sprints in an Agile methodology.&lt;/p&gt;

&lt;h3 id=&quot;queries&quot;&gt;Queries&lt;/h3&gt;

&lt;p&gt;For the Query side, in the Application Layer we have only an small interface. And in the Infrastructure Layer we have the Adapter implementation.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public interface IAccountsQueries
{
  Task&amp;lt;AccountResult&amp;gt; GetAccount(Guid id);
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By having an guarantee that the query side does not make changes in state. We can take advantage of better solutions for reading. For instance we can use caching, segregated databases to boost performance and it could be done inside the Adapter.&lt;/p&gt;

&lt;h2 id=&quot;ports&quot;&gt;Ports&lt;/h2&gt;

&lt;p&gt;A Port is an way an Actor can interact with the Application Layer. The role of the Port is to translate the Actor’s input into structures the Application Services can understand. For instance a Port could be an Web Form, an Console App or another system. For this article the Port supports the REST protocol and was implemented using WebApi framework.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Route(&quot;api/[controller]&quot;)]
public class AccountsController : Controller
{
  private readonly IDepositService depositService;

  public AccountsController(
    IDepositService depositService)
  {
    this.depositService = depositService;
  }

  /// &amp;lt;summary&amp;gt;
  /// Deposit from an account
  /// &amp;lt;/summary&amp;gt;
  [HttpPatch(&quot;Deposit&quot;)]
  public async Task&amp;lt;IActionResult&amp;gt; Deposit(\[FromBody\]DepositRequest request)
  {
    var command = new DepositCommand(
      request.AccountId,
      request.Amount);

    DepositResult depositResult = await depositService.Process(command);

    if (depositResult == null)
    {
      return new NoContentResult();
    }

    Model model = new Model(
      depositResult.Transaction.Amount,
      depositResult.Transaction.Description,
      depositResult.Transaction.TransactionDate,
      depositResult.UpdatedBalance
    );

    return new ObjectResult(model);
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The WebApi has Controllers that do not depends on Application Services implementation, its easy to mock this services.&lt;/p&gt;

&lt;h3 id=&quot;port-components&quot;&gt;Port Components&lt;/h3&gt;

&lt;p&gt;We segregate Port Components by use cases, for the Deposit use case:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Request (DepositRequest.cs)&lt;/li&gt;
  &lt;li&gt;Controller + Action (DepositController.cs)&lt;/li&gt;
  &lt;li&gt;Model (Model.cs)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;source-code&quot;&gt;Source Code&lt;/h2&gt;

&lt;p&gt;You can download the source code on &lt;a href=&quot;https://github.com/ivanpaulovich/acerola-hexagonal-architecture&quot;&gt;Acerola GitHub repository&lt;/a&gt; or through the following commands:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new -i Paulovich.Caju::0.5.0
dotnet new hexagonal \
  --data-access entityframework \
  --use-cases full \
  --user-interface webapi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;With Hexagonal Architecture you design a decoupled software that allows major decisions to be made in the future, all business rules will be isolated from peripheral concerns. And you have the option to try different ports and adapters with less effort. What comes next? Leave your comment.&lt;/p&gt;</content><author><name>Ivan Paulovich</name><email>ivan@paulovich.net</email></author><summary type="html">The feedback of the Clean Architecture for .NET Applications made me feel like I needed to take a step back and introduce some concepts first, so I will present my implementation of Hexagonal Architecture to make easier to understand them completely. Unfortunately in my previous experiences in different companies, remain very common that applications are built on top of frameworks and databases. I see that many developers are used to implement software that mimics the data tables instead of design software driven by the business domain. As time goes by, the software becomes highly coupled to these external details and what happens next is the application evolution been dictated by what the vendors support. Hexagonal Architecture (aka Ports and Adapters) is one strategy to decouple the use cases from the external details. It was coined by Alistar Cockburn more than 13 years ago, and it is getting better with the Onion and Clean Architectures. Let me introduce the Hexagonal Architecture’s intent:</summary></entry><entry><title type="html">Architecture Templates for dotnet new</title><link href="https://paulovich.net/architecture-templates-for-dotnet-new/" rel="alternate" type="text/html" title="Architecture Templates for dotnet new" /><published>2018-05-22T06:12:52+02:00</published><updated>2018-05-22T06:12:52+02:00</updated><id>https://paulovich.net/architecture-templates-for-dotnet-new</id><content type="html" xml:base="https://paulovich.net/architecture-templates-for-dotnet-new/">&lt;p&gt;I am releasing an new version of my &lt;a href=&quot;https://dotnetnew.azurewebsites.net/pack/Paulovich.Caju&quot;&gt;Architecture Templates for dotnet new&lt;/a&gt;. We are working on testing, compatibility and documentation.&lt;/p&gt;

&lt;h2 id=&quot;paulovichcaju-040-release-notes&quot;&gt;Paulovich.Caju 0.4.0 Release notes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;New architecture tips for each layer in Clean Architecture template. Check out the &lt;a href=&quot;https://paulovich.net/clean-architecture-for-net-applications/&quot;&gt;blog post&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Command line breaking changes. See the topic below.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-to-install-the-latest-version&quot;&gt;How to install the latest version&lt;/h2&gt;

&lt;p&gt;To install the latest version use:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new -i Paulovich.Caju
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then run &lt;strong&gt;dotnet new&lt;/strong&gt; and check the templates list:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Templates&lt;/th&gt;
      &lt;th&gt;Short Name&lt;/th&gt;
      &lt;th&gt;Language&lt;/th&gt;
      &lt;th&gt;Tags&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Hexagonal Architecture for .NET Applications!&lt;/td&gt;
      &lt;td&gt;hexagonal&lt;/td&gt;
      &lt;td&gt;[C#]&lt;/td&gt;
      &lt;td&gt;Common/Library/Web API&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Event-Sourcing for .NET Applications!&lt;/td&gt;
      &lt;td&gt;eventsourcing&lt;/td&gt;
      &lt;td&gt;[C#]&lt;/td&gt;
      &lt;td&gt;Common/Library/Web API&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Clean Architecture for .NET Applications!&lt;/td&gt;
      &lt;td&gt;clean&lt;/td&gt;
      &lt;td&gt;[C#]&lt;/td&gt;
      &lt;td&gt;Common/Library/Web API&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;command-line-changes&quot;&gt;Command Line Changes&lt;/h2&gt;

&lt;p&gt;I changed the short name &lt;strong&gt;caju&lt;/strong&gt; to three more specifics commands &lt;strong&gt;hexagonal&lt;/strong&gt;, &lt;strong&gt;eventsourcing&lt;/strong&gt;and &lt;strong&gt;clean&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The old commands were:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new caju --architecture-style hexagonal
dotnet new caju --architecture-style eventsourcing
dotnet new caju --architecture-style clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;strong&gt;new commands&lt;/strong&gt; in Paulovich.Caju 0.4.0 package are:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dotnet new hexagonal
dotnet new eventsourcing
dotnet new clean
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Much more clear now! Remember that each template has slight differences, so add the &lt;strong&gt;–help&lt;/strong&gt; for details.&lt;/p&gt;

&lt;p&gt;This templates segregation are required to speed up the updates.&lt;/p&gt;</content><author><name>Ivan Paulovich</name><email>ivan@paulovich.net</email></author><summary type="html">I am releasing an new version of my Architecture Templates for dotnet new. We are working on testing, compatibility and documentation.</summary></entry><entry><title type="html">Clean Architecture for .NET Applications</title><link href="https://paulovich.net/clean-architecture-for-net-applications/" rel="alternate" type="text/html" title="Clean Architecture for .NET Applications" /><published>2018-05-15T06:12:52+02:00</published><updated>2018-05-15T06:12:52+02:00</updated><id>https://paulovich.net/clean-architecture-for-net-applications</id><content type="html" xml:base="https://paulovich.net/clean-architecture-for-net-applications/">&lt;p&gt;I’d like to introduce my service template for .NET Applications based on the Clean Architecture style. You can download the full &lt;a href=&quot;https://github.com/ivanpaulovich/manga-clean-architecture&quot;&gt;source code&lt;/a&gt; or you can play with the &lt;a href=&quot;https://github.com/ivanpaulovich/dotnet-new-caju&quot;&gt;dotnet new caju&lt;/a&gt; tool using the following commands:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ dotnet new -i Paulovich.Caju::0.4.0
$ dotnet new clean \
  --data-access mongo \
  --use-cases full \
  --user-interface webapi
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As the SOLID principles and the Clean Architecture rules are worth to write about it, I am starting this blogging series explaining the decisions we have made through the development of the Manga Project. Feedback are welcome! Clean Architecture &lt;a href=&quot;https://8thlight.com/blog/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;expects at least 4 layers&lt;/a&gt; and in each layer there are common components. Starting with the layers from inside to the outer ones: &lt;a href=&quot;/static/CleanArchitecture-Uncle-Bob.jpg&quot;&gt;&lt;img src=&quot;/static/CleanArchitecture-Uncle-Bob.jpg&quot; alt=&quot;Clean Architecture Diagram by Uncle Bob&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Enterprise Business Rules&lt;/li&gt;
  &lt;li&gt;Application Business Rules&lt;/li&gt;
  &lt;li&gt;Interface Adapters&lt;/li&gt;
  &lt;li&gt;Frameworks &amp;amp; Drivers&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Let’s talk about on how we implemented this layers in the Manga Project!&lt;/p&gt;

&lt;h2 id=&quot;1-enterprise-business-rules&quot;&gt;&lt;strong&gt;1. Enterprise Business Rules&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Beginning with the Enterprise Business Rules Layer we are talking about Aggregates, Entities, Value Objects and others patterns of a rich Domain. In our specific Bounded Context we have the Customer and the Account as &lt;strong&gt;Aggregate Roots&lt;/strong&gt;, also the Credit/Debit transactions as &lt;strong&gt;Entities&lt;/strong&gt; and last but no least we have the Name, Person Number and Amount as &lt;strong&gt;Value Objects&lt;/strong&gt;. &lt;a href=&quot;/static/Account-Balance-Context.png&quot;&gt;&lt;img src=&quot;/static/Account-Balance-Context.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; In short words, the previous components are the business entities that encapsulates fields and prevents unexpected changes or behaviors, these components maintain the application state in the most reliable way. Now, let me highlight some characteristics of this data structures:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Aggregate Roots controls the entities graph and are used by repositories for data persistence. The software craftsman Vaugn Vernon wrote the &lt;a href=&quot;https://vaughnvernon.co/?p=838&quot;&gt;rules for designing effective aggregates&lt;/a&gt; and I highly recommend watching the video &lt;a href=&quot;https://www.youtube.com/watch?v=zzxinXTIMmo&quot;&gt;Curing you Domain Model Anemia with Effective &amp;amp; Clean Tips from the Real World&lt;/a&gt; from Edson Yanaga these helped me a lot to enrich my model.&lt;/li&gt;
  &lt;li&gt;You will see that majority of the classes have properties with &lt;em&gt;private sets&lt;/em&gt; or &lt;em&gt;protected sets&lt;/em&gt; in order to prevent unexpected state changes from the several clients along the Use Cases (we avoid &lt;em&gt;public sets when possible)&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;We had to make exceptions for &lt;em&gt;constructors&lt;/em&gt; due of deserialization requirements.&lt;/li&gt;
  &lt;li&gt;Value Objects are expected to be immutable and they have the most closed fields. Fields that change only when we create a new instance of the Value Object.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can find interesting Domain Entities in our GitHub, following there are an Aggregate Root example:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Customer : Entity, IAggregateRoot
{
    public virtual Name Name { get; protected set; }
    public virtual PIN PIN { get; protected set; }
    public virtual int Version { get; protected set; }
    public virtual AccountCollection Accounts { get; protected set; }

    protected Customer()
    {
        Accounts = new AccountCollection();
    }

    public Customer(PIN pin, Name name)
        : this()
    {
        PIN = pin;
        Name = name;
    }

    public virtual void Register(Guid accountId)
    {
        Accounts = new AccountCollection();
        Accounts.Add(accountId);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;2-application-business-rules&quot;&gt;&lt;strong&gt;2. Application Business Rules&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Let’s move to the Application Business Rules Layer that contains the Use Cases of our Bounded Context. As said by Uncle Bob in his book Clean Architecture:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Just as the plans for a house or a library scream about the use cases of those buildings, so should the architecture of a software application scream about the use cases of the application.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So our Use Cases implementations are first-class modules in the root of this layer. The shape of a Use Case is an &lt;strong&gt;Interactor&lt;/strong&gt; object that receives an &lt;strong&gt;Input&lt;/strong&gt;, do some work then pass the &lt;strong&gt;Output&lt;/strong&gt; through the currently &lt;strong&gt;Presenter&lt;/strong&gt; instance as shown in the following figure: &lt;a href=&quot;/static/Flow-Of-Control.png&quot;&gt;&lt;img src=&quot;/static/Flow-Of-Control.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; In the previous Flow of Control we have:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;An &lt;strong&gt;Action&lt;/strong&gt; in the &lt;strong&gt;CustomersController&lt;/strong&gt; calls a method in the &lt;strong&gt;RegisterInteractor&lt;/strong&gt; with the &lt;strong&gt;RegisterInput&lt;/strong&gt; data;&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;RegisterInteractor&lt;/strong&gt; that implements **IInputBoundary&lt;T&gt;** calls the **CustomerRepository** passing the **CustomerAggregate** object created in that Use Case.&lt;/T&gt;&lt;/li&gt;
  &lt;li&gt;Then the &lt;strong&gt;RegisterInteractor&lt;/strong&gt; generates a RegisterOutput data object (POCO) and passes it to the currently IOutputBoundary.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;RegisterPresenter&lt;/strong&gt; which implements &lt;strong&gt;IOutputBoundary&lt;/strong&gt; receives the &lt;strong&gt;RegisterOutput&lt;/strong&gt; and creates the &lt;strong&gt;RegisterModel&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;RegisterModel&lt;/strong&gt; created in step 4 are returned by the &lt;strong&gt;Action&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;In our example application we have other Use Cases that allow Customer Registration and Bank Account transactions. In simple terms these are the Use Cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Customer Registration.&lt;/li&gt;
  &lt;li&gt;Get Customer Account Details.&lt;/li&gt;
  &lt;li&gt;Get Account Details.&lt;/li&gt;
  &lt;li&gt;Deposit to an account.&lt;/li&gt;
  &lt;li&gt;Withdraw from an account.&lt;/li&gt;
  &lt;li&gt;Close an account.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Continuing to explore our implementation you will see that the &lt;strong&gt;RegisterInteractor&lt;/strong&gt; receives the services by DI. The Process method does the Application Business Rules, calls the Repository and at the end passes the &lt;strong&gt;RegisterOutput&lt;/strong&gt; through the &lt;strong&gt;RegisterPresenter&lt;/strong&gt; instance. Let’s take a look at the RegisterInteractor class:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class RegisterInteractor : IInputBoundary
{
    private readonly ICustomerWriteOnlyRepository customerWriteOnlyRepository;
    private readonly IAccountWriteOnlyRepository accountWriteOnlyRepository;
    private readonly IOutputBoundary outputBoundary;
    private readonly IOutputConverter outputConverter;
    
    public RegisterInteractor(
        ICustomerWriteOnlyRepository customerWriteOnlyRepository,
        IAccountWriteOnlyRepository accountWriteOnlyRepository,
        IOutputBoundary outputBoundary,
        IOutputConverter outputConverter)
    {
        this.customerWriteOnlyRepository = customerWriteOnlyRepository;
        this.accountWriteOnlyRepository = accountWriteOnlyRepository;
        this.outputBoundary = outputBoundary;
        this.outputConverter = outputConverter;
    }

    public async Task Process(RegisterInput input)
    {
        Customer customer = new Customer(input.PIN, input.Name);

        Account account = new Account(customer.Id);
        Credit credit = new Credit(account.Id, input.InitialAmount);
        account.Deposit(credit);

        customer.Register(account.Id);

        await customerWriteOnlyRepository.Add(customer);
        await accountWriteOnlyRepository.Add(account, credit);

        CustomerOutput customerOutput = outputConverter.Map(customer);
        AccountOutput accountOutput = outputConverter.Map(account);
        RegisterOutput output = new RegisterOutput(customerOutput, accountOutput);

        outputBoundary.Populate(output);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;What have you seen until here is &lt;strong&gt;Enterprise + Application Business Rules&lt;/strong&gt; enforced without frameworks dependencies or without database coupling. Every details have abstractions protecting the Business Domain to be coupled to tech stuff.&lt;/p&gt;

&lt;h2 id=&quot;3-interface-adapters&quot;&gt;3. Interface Adapters&lt;/h2&gt;

&lt;p&gt;Now we advance to the next layer, at the Interface Adapters Layer we translate the User input in a way that the Interactors understands, it is good practice to do not reuse entities in this layer because it creates coupling, the front-end has frameworks, other ways of creating his data structures, different presentation for each field and validation rules. In our implementation we have the following components for every use case:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Request&lt;/strong&gt;: a data structure for the user input.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;A Controller with an Action&lt;/strong&gt;: this component receives the user input, calls the appropriate Interactor which do some processing then pass the output through the Presenter instance.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Presenter&lt;/strong&gt;: it converters the Output to the Model.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Model&lt;/strong&gt;: this is the return data structure for MVC applications.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And this is how looks a Controller for the Register Use Case. We must highlight that the Controller knows which Interactor to call but it does not care about the Output of it, instead the Controller delegates the responsibility of generating a Model to the Presenter instance.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[Route(&quot;api/[controller]&quot;)]
public class CustomersController : Microsoft.AspNetCore.Mvc.Controller
{
    private readonly IInputBoundary&amp;lt;RegisterInput&amp;gt; registerInput;
    private readonly Presenter registerPresenter;

    public CustomersController(
        IInputBoundary&amp;lt;RegisterInput&amp;gt; registerInput,
        Presenter registerPresenter)
    {
        this.registerInput = registerInput;
        this.registerPresenter = registerPresenter;
    }

    /// &amp;lt;summary&amp;gt;
    /// Register a new Customer
    /// &amp;lt;/summary&amp;gt;
    [HttpPost]
    public async Task&amp;lt;IActionResult&amp;gt; Post([FromBody]RegisterRequest message)
    {
        var request = new RegisterInput(
           message.PIN, message.Name, message.InitialAmount);
        await registerInput.Process(request);
        return registerPresenter.ViewModel;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;An Presenter class is detailed bellow and it shows a conversion from the RegisterOutput to two different ViewModels. One ViewModel for null Outputs and another ViewModel for successful registrations.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class Presenter : IOutputBoundary&amp;lt;RegisterOutput&amp;gt;
{
    public IActionResult ViewModel { get; private set; }
    public RegisterOutput Output { get; private set; }

    public void Populate(RegisterOutput response)
    {
        Output = response;

        if (response == null)
        {
            ViewModel = new NoContentResult();
            return;
        }
        
        List&amp;lt;TransactionModel&amp;gt; transactions = new List&amp;lt;TransactionModel&amp;gt;();

        foreach (var item in response.Account.Transactions)
        {
            var transaction = new TransactionModel(
                item.Amount,
                item.Description,
                item.TransactionDate);

            transactions.Add(transaction);
        }

        AccountDetailsModel account = new AccountDetailsModel(
            response.Account.AccountId,
            response.Account.CurrentBalance,
            transactions);

        List&amp;lt;AccountDetailsModel&amp;gt; accounts = new List&amp;lt;AccountDetailsModel&amp;gt;();
        accounts.Add(account);

        Model model = new Model(
            response.Customer.CustomerId,
            response.Customer.Personnummer,
            response.Customer.Name,
            accounts
        );

        ViewModel = new CreatedAtRouteResult(&quot;GetCustomer&quot;, 
            new { customerId = model.CustomerId }, 
            model);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;4-frameworks--drivers&quot;&gt;&lt;strong&gt;4. Frameworks &amp;amp; Drivers&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;Our more external layer is the Frameworks &amp;amp; Drivers who implements Data Base Access, Dependency Injection Framework (DI), JSON Serializer and technology specific stuff. It has an CustomerRepository implementation. See the GitHub for the MongoContext and other Repositories classes.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class CustomerRepository : ICustomerReadOnlyRepository, ICustomerWriteOnlyRepository
{
    private readonly Context mongoContext;

    public CustomerRepository(Context mongoContext)
    {
        this.mongoContext = mongoContext;
    }

    public async Task Get(Guid customerId)
    {
        Customer customer = await mongoContext.Customers
            .Find(e =&amp;gt; e.Id == customerId)
            .SingleOrDefaultAsync();

        return customer;
    }

    public async Task Add(Customer customer)
    {
        await mongoContext.Customers
            .InsertOneAsync(customer);
    }

    public async Task Update(Customer customer)
    {
        await mongoContext.Customers
            .ReplaceOneAsync(e =&amp;gt; e.Id == customer.Id, customer);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We group the DI by Autofac Modules and created rules for selecting the interfaces and implementations by namespace patterns.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;public class InfrastructureModule : Autofac.Module
{
    public string ConnectionString { get; set; }
    public string DatabaseName { get; set; }

    protected override void Load(ContainerBuilder builder)
    {
        builder.RegisterType()
            .As()
            .WithParameter(&quot;connectionString&quot;, ConnectionString)
            .WithParameter(&quot;databaseName&quot;, DatabaseName)
            .SingleInstance();

        //
        // Register all Types in Manga.Infrastructure
        //
        builder.RegisterAssemblyTypes(typeof(OutputConverter).Assembly)
            .AsImplementedInterfaces()
            .InstancePerLifetimeScope();
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally everything is tied together with configurations in the &lt;strong&gt;autofac.json&lt;/strong&gt; which also makes possible to change implementations easily:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;defaultAssembly&quot;: &quot;Manga.Infrastructure&quot;,
  &quot;modules&quot;: [
    {
      &quot;type&quot;: &quot;Manga.Infrastructure.Modules.WebApiModule&quot;,
      &quot;properties&quot;: {
      }
    },
    {
      &quot;type&quot;: &quot;Manga.Infrastructure.Modules.ApplicationModule&quot;,
      &quot;properties&quot;: {
      }
    },
    {
      &quot;type&quot;: &quot;Manga.Infrastructure.Modules.InfrastructureModule&quot;,
      &quot;properties&quot;: {
        &quot;ConnectionString&quot;: &quot;mongodb://10.0.75.1:27017&quot;,
        &quot;DatabaseName&quot;: &quot;Manga-V01&quot;
      }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Summing up, we separated the Solution in projects so we could draw boundaries between the modules, clarify the dependencies and we have small classes that makes easy to create new features without changing the existing ones. These are the Solution Explorer in Visual Studio 2017: &lt;a href=&quot;/static/Manga-Solution-Explorer.png&quot;&gt;&lt;img src=&quot;/static/Manga-Solution-Explorer.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; And to help you understand the dependencies between the projects this diagram: &lt;a href=&quot;/static/Layers.png&quot;&gt;&lt;img src=&quot;/static/Layers.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; Finally, as we did not cover every detail in source code take a look at.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/ivanpaulovich/manga.git
cd manga/source/WebAPI/Manga.WebApi
dotnet run
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Or by: &lt;a href=&quot;/static/dotnet-new-caju-0.2.84.gif&quot;&gt;&lt;img src=&quot;/static/dotnet-new-caju-0.2.84.gif&quot; alt=&quot;&quot; /&gt;&lt;/a&gt; I hope that this template could improve your productivity in building applications with evolutionary architecture.&lt;/p&gt;

&lt;h3 id=&quot;updates&quot;&gt;Updates&lt;/h3&gt;

&lt;p&gt;I changed the installation and &lt;a href=&quot;https://paulovich.net/architecture-templates-for-dotnet-new/&quot;&gt;template generation command lines&lt;/a&gt;.&lt;/p&gt;</content><author><name>Ivan Paulovich</name><email>ivan@paulovich.net</email></author><summary type="html">I’d like to introduce my service template for .NET Applications based on the Clean Architecture style. You can download the full source code or you can play with the dotnet new caju tool using the following commands:</summary></entry><entry><title type="html">Check out these awesome Hexagonal and Clean Architectures implementations!</title><link href="https://paulovich.net/check-out-these-awesome-hexagonal-and-clean-architectures-implementations/" rel="alternate" type="text/html" title="Check out these awesome Hexagonal and Clean Architectures implementations!" /><published>2018-04-05T06:12:52+02:00</published><updated>2018-04-05T06:12:52+02:00</updated><id>https://paulovich.net/check-out-these-awesome-hexagonal-and-clean-architectures-implementations</id><content type="html" xml:base="https://paulovich.net/check-out-these-awesome-hexagonal-and-clean-architectures-implementations/">&lt;p&gt;&lt;a href=&quot;https://www.linkedin.com/in/filipe-augusto-lima-de-souza-95a16833/&quot;&gt;Filipe Augusto&lt;/a&gt; and I have been designing architectures and adapting legacy systems to more sophisticated market standards for a few years. Software Architecture is not a snapshot, it is a living thing and after several proofs of concept in real world systems, we come to some implementations that cover different scenarios.&lt;/p&gt;

&lt;p&gt;To illustrate, we published on GitHub three projects with architecture practices for highly testable, framework and database independent softwares&lt;strong&gt;.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The first one is the &lt;a href=&quot;https://github.com/ivanpaulovich/acerola/&quot;&gt;Acerola Project&lt;/a&gt;, which follows the Hexagonal Architecture (in the center there’s a Domain plus the Application and externally Ports and Adapters).&lt;/p&gt;

&lt;p&gt;The second one is the &lt;a href=&quot;https://github.com/ivanpaulovich/manga/&quot;&gt;Manga Project&lt;/a&gt; that goes beyond the Hexagonal Architecture and uses the rules of dependencies and patterns of Clean Architecture. It places User Cases as first-class objects and dependencies must point only inward, toward high-level policies.&lt;/p&gt;

&lt;p&gt;The last one is &lt;a href=&quot;https://github.com/ivanpaulovich/amora/&quot;&gt;Amora Project&lt;/a&gt;, an Angular frontend for the previous microservices.&lt;/p&gt;

&lt;p&gt;Everything we’ve published is fresh new and we are in the alpha releases. We’re planning to implement and explore new concepts in the future, as Fitness Functions and show by example integrations between few microservices via Broker and Mediator pattern.&lt;/p&gt;

&lt;p&gt;These projects were born in the DevOps, Cloud and Container era, they come with CI/CD, TDD, Docker, .NET Core and Azure! Feedback and pull requests are welcome!&lt;/p&gt;

&lt;p&gt;Check out the projects. Worth it!&lt;/p&gt;</content><author><name>Ivan Paulovich</name><email>ivan@paulovich.net</email></author><summary type="html">Filipe Augusto and I have been designing architectures and adapting legacy systems to more sophisticated market standards for a few years. Software Architecture is not a snapshot, it is a living thing and after several proofs of concept in real world systems, we come to some implementations that cover different scenarios.</summary></entry></feed>